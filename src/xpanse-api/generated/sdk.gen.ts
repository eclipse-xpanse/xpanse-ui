/*
 * SPDX-License-Identifier: Apache-2.0
 * SPDX-FileCopyrightText: Huawei Inc.
 */

// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
    AddIsvCloudCredentialData,
    AddIsvCloudCredentialErrors,
    AddIsvCloudCredentialResponses,
    AddServicePolicyData,
    AddServicePolicyErrors,
    AddServicePolicyResponses,
    AddUserCloudCredentialData,
    AddUserCloudCredentialErrors,
    AddUserCloudCredentialResponses,
    AddUserPolicyData,
    AddUserPolicyErrors,
    AddUserPolicyResponses,
    AuthorizeData,
    AuthorizeErrors,
    AuthorizeResponses,
    CancelServiceTemplateRequestByRequestIdData,
    CancelServiceTemplateRequestByRequestIdErrors,
    CancelServiceTemplateRequestByRequestIdResponses,
    ChangeServiceConfigurationData,
    ChangeServiceConfigurationErrors,
    ChangeServiceConfigurationResponses,
    ChangeServiceLockConfigData,
    ChangeServiceLockConfigErrors,
    ChangeServiceLockConfigResponses,
    CompleteTaskData,
    CompleteTaskErrors,
    CompleteTaskResponses,
    CreateServiceActionData,
    CreateServiceActionErrors,
    CreateServiceActionResponses,
    CreateServiceObjectData,
    CreateServiceObjectErrors,
    CreateServiceObjectResponses,
    DeleteIsvCloudCredentialData,
    DeleteIsvCloudCredentialErrors,
    DeleteIsvCloudCredentialResponses,
    DeleteOrderByOrderIdData,
    DeleteOrderByOrderIdErrors,
    DeleteOrderByOrderIdResponses,
    DeleteOrdersByServiceIdData,
    DeleteOrdersByServiceIdErrors,
    DeleteOrdersByServiceIdResponses,
    DeleteServiceObjectData,
    DeleteServiceObjectErrors,
    DeleteServiceObjectResponses,
    DeleteServicePolicyData,
    DeleteServicePolicyErrors,
    DeleteServicePolicyResponses,
    DeleteServiceTemplateData,
    DeleteServiceTemplateErrors,
    DeleteServiceTemplateResponses,
    DeleteUserCloudCredentialData,
    DeleteUserCloudCredentialErrors,
    DeleteUserCloudCredentialResponses,
    DeleteUserPolicyData,
    DeleteUserPolicyErrors,
    DeleteUserPolicyResponses,
    DeployData,
    DeployErrors,
    DeployResponses,
    DestroyData,
    DestroyErrors,
    DestroyResponses,
    FetchData,
    FetchErrors,
    FetchResponses,
    FetchUpdateData,
    FetchUpdateErrors,
    FetchUpdateResponses,
    GetAccessTokenData,
    GetAccessTokenErrors,
    GetAccessTokenResponses,
    GetActiveCspsData,
    GetActiveCspsErrors,
    GetActiveCspsResponses,
    GetAllDeployedServicesByCspData,
    GetAllDeployedServicesByCspErrors,
    GetAllDeployedServicesByCspResponses,
    GetAllDeployedServicesByIsvData,
    GetAllDeployedServicesByIsvErrors,
    GetAllDeployedServicesByIsvResponses,
    GetAllDeployedServicesData,
    GetAllDeployedServicesErrors,
    GetAllDeployedServicesResponses,
    GetAllDeployedServicesWithDetailsData,
    GetAllDeployedServicesWithDetailsErrors,
    GetAllDeployedServicesWithDetailsResponses,
    GetAllOrdersByServiceIdData,
    GetAllOrdersByServiceIdErrors,
    GetAllOrdersByServiceIdResponses,
    GetAllServicePoliciesData,
    GetAllServicePoliciesErrors,
    GetAllServicePoliciesResponses,
    GetAllServiceTemplatesByIsvData,
    GetAllServiceTemplatesByIsvErrors,
    GetAllServiceTemplatesByIsvResponses,
    GetAllServiceTemplatesData,
    GetAllServiceTemplatesErrors,
    GetAllServiceTemplatesResponses,
    GetAllUserPoliciesData,
    GetAllUserPoliciesErrors,
    GetAllUserPoliciesResponses,
    GetAvailabilityZonesData,
    GetAvailabilityZonesErrors,
    GetAvailabilityZonesResponses,
    GetComputeResourceInventoryOfServiceData,
    GetComputeResourceInventoryOfServiceErrors,
    GetComputeResourceInventoryOfServiceResponses,
    GetCredentialCapabilitiesData,
    GetCredentialCapabilitiesErrors,
    GetCredentialCapabilitiesResponses,
    GetCredentialOpenApiData,
    GetCredentialOpenApiErrors,
    GetCredentialOpenApiResponses,
    GetCredentialTypesData,
    GetCredentialTypesErrors,
    GetCredentialTypesResponses,
    GetCurrentConfigurationOfServiceData,
    GetCurrentConfigurationOfServiceErrors,
    GetCurrentConfigurationOfServiceResponses,
    GetExistingResourceNamesWithKindData,
    GetExistingResourceNamesWithKindErrors,
    GetExistingResourceNamesWithKindResponses,
    GetIsvCloudCredentialsData,
    GetIsvCloudCredentialsErrors,
    GetIsvCloudCredentialsResponses,
    GetLatestServiceDeploymentStatusData,
    GetLatestServiceDeploymentStatusErrors,
    GetLatestServiceDeploymentStatusResponses,
    GetLatestServiceOrderStatusData,
    GetLatestServiceOrderStatusErrors,
    GetLatestServiceOrderStatusResponses,
    GetMetricsData,
    GetMetricsErrors,
    GetMetricsResponses,
    GetObjectsByServiceIdData,
    GetObjectsByServiceIdErrors,
    GetObjectsByServiceIdResponses,
    GetOrderableServiceDetailsByIdData,
    GetOrderableServiceDetailsByIdErrors,
    GetOrderableServiceDetailsByIdResponses,
    GetOrderableServiceDetailsByServiceIdData,
    GetOrderableServiceDetailsByServiceIdErrors,
    GetOrderableServiceDetailsByServiceIdResponses,
    GetOrderableServicesData,
    GetOrderableServicesErrors,
    GetOrderableServicesResponses,
    GetOrderDetailsByOrderIdData,
    GetOrderDetailsByOrderIdErrors,
    GetOrderDetailsByOrderIdResponses,
    GetPendingServiceChangeRequestData,
    GetPendingServiceChangeRequestErrors,
    GetPendingServiceChangeRequestResponses,
    GetPendingServiceReviewRequestsData,
    GetPendingServiceReviewRequestsErrors,
    GetPendingServiceReviewRequestsResponses,
    GetPolicyDetailsData,
    GetPolicyDetailsErrors,
    GetPolicyDetailsResponses,
    GetPricesByServiceData,
    GetPricesByServiceErrors,
    GetPricesByServiceResponses,
    GetRequestedServiceTemplateByRequestIdData,
    GetRequestedServiceTemplateByRequestIdErrors,
    GetRequestedServiceTemplateByRequestIdResponses,
    GetSelfHostedServiceDetailsByIdData,
    GetSelfHostedServiceDetailsByIdErrors,
    GetSelfHostedServiceDetailsByIdResponses,
    GetServiceChangeRequestDetailsData,
    GetServiceChangeRequestDetailsErrors,
    GetServiceChangeRequestDetailsResponses,
    GetServiceDetailsByIdForIsvData,
    GetServiceDetailsByIdForIsvErrors,
    GetServiceDetailsByIdForIsvResponses,
    GetServicePolicyDetailsData,
    GetServicePolicyDetailsErrors,
    GetServicePolicyDetailsResponses,
    GetServicePriceByFlavorData,
    GetServicePriceByFlavorErrors,
    GetServicePriceByFlavorResponses,
    GetServiceTemplateDetailsByIdData,
    GetServiceTemplateDetailsByIdErrors,
    GetServiceTemplateDetailsByIdResponses,
    GetServiceTemplateDetailsData,
    GetServiceTemplateDetailsErrors,
    GetServiceTemplateDetailsResponses,
    GetServiceTemplateRequestHistoryForCspData,
    GetServiceTemplateRequestHistoryForCspErrors,
    GetServiceTemplateRequestHistoryForCspResponses,
    GetServiceTemplateRequestHistoryForIsvData,
    GetServiceTemplateRequestHistoryForIsvErrors,
    GetServiceTemplateRequestHistoryForIsvResponses,
    GetSitesOfCspData,
    GetSitesOfCspErrors,
    GetSitesOfCspResponses,
    GetUserCloudCredentialsData,
    GetUserCloudCredentialsErrors,
    GetUserCloudCredentialsResponses,
    GetVendorHostedServiceDetailsByIdData,
    GetVendorHostedServiceDetailsByIdErrors,
    GetVendorHostedServiceDetailsByIdResponses,
    HealthCheckData,
    HealthCheckErrors,
    HealthCheckResponses,
    ManageFailedOrderData,
    ManageFailedOrderErrors,
    ManageFailedOrderResponses,
    ModifyData,
    ModifyErrors,
    ModifyResponses,
    OpenApiData,
    OpenApiErrors,
    OpenApiResponses,
    PortData,
    PortErrors,
    PortResponses,
    PurgeData,
    PurgeErrors,
    PurgeResponses,
    QueryTasksData,
    QueryTasksErrors,
    QueryTasksResponses,
    RecreateServiceData,
    RecreateServiceErrors,
    RecreateServiceResponses,
    RedeployFailedDeploymentData,
    RedeployFailedDeploymentErrors,
    RedeployFailedDeploymentResponses,
    RegisterData,
    RegisterErrors,
    RegisterResponses,
    RepublishData,
    RepublishErrors,
    RepublishResponses,
    RestartServiceData,
    RestartServiceErrors,
    RestartServiceResponses,
    ReviewServiceTemplateRequestData,
    ReviewServiceTemplateRequestErrors,
    ReviewServiceTemplateRequestResponses,
    StackHealthStatusData,
    StackHealthStatusErrors,
    StackHealthStatusResponses,
    StartServiceData,
    StartServiceErrors,
    StartServiceResponses,
    StopServiceData,
    StopServiceErrors,
    StopServiceResponses,
    UnpublishData,
    UnpublishErrors,
    UnpublishResponses,
    UpdateData,
    UpdateErrors,
    UpdateIsvCloudCredentialData,
    UpdateIsvCloudCredentialErrors,
    UpdateIsvCloudCredentialResponses,
    UpdateResponses,
    UpdateServiceChangeResultData,
    UpdateServiceChangeResultErrors,
    UpdateServiceChangeResultResponses,
    UpdateServiceObjectData,
    UpdateServiceObjectErrors,
    UpdateServiceObjectResponses,
    UpdateServicePolicyData,
    UpdateServicePolicyErrors,
    UpdateServicePolicyResponses,
    UpdateUserCloudCredentialData,
    UpdateUserCloudCredentialErrors,
    UpdateUserCloudCredentialResponses,
    UpdateUserPolicyData,
    UpdateUserPolicyErrors,
    UpdateUserPolicyResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
    TData,
    ThrowOnError
> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Manage failed task orders.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const manageFailedOrder = <ThrowOnError extends boolean = false>(
    options: Options<ManageFailedOrderData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<ManageFailedOrderResponses, ManageFailedOrderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/workflow/task/{taskId}',
        ...options,
    });
};

/**
 * Complete tasks by task ID and set global process variables .<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const completeTask = <ThrowOnError extends boolean = false>(
    options: Options<CompleteTaskData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<CompleteTaskResponses, CompleteTaskErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/workflow/complete/task/{taskId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Delete user's credential for connecting to the cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const deleteUserCloudCredential = <ThrowOnError extends boolean = false>(
    options: Options<DeleteUserCloudCredentialData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteUserCloudCredentialResponses,
        DeleteUserCloudCredentialErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/user/credentials',
        ...options,
    });
};

/**
 * List all cloud provider credentials added by the user for a cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getUserCloudCredentials = <ThrowOnError extends boolean = false>(
    options?: Options<GetUserCloudCredentialsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetUserCloudCredentialsResponses,
        GetUserCloudCredentialsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/user/credentials',
        ...options,
    });
};

/**
 * Add user's credential for connecting to the cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const addUserCloudCredential = <ThrowOnError extends boolean = false>(
    options: Options<AddUserCloudCredentialData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        AddUserCloudCredentialResponses,
        AddUserCloudCredentialErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/user/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Update user's credential for connecting to the cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const updateUserCloudCredential = <ThrowOnError extends boolean = false>(
    options: Options<UpdateUserCloudCredentialData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        UpdateUserCloudCredentialResponses,
        UpdateUserCloudCredentialErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/user/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Start a task to stop the service instance.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const stopService = <ThrowOnError extends boolean = false>(options: Options<StopServiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<StopServiceResponses, StopServiceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/stop/{serviceId}',
        ...options,
    });
};

/**
 * Start a task to start the service instance.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const startService = <ThrowOnError extends boolean = false>(
    options: Options<StartServiceData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<StartServiceResponses, StartServiceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/start/{serviceId}',
        ...options,
    });
};

/**
 * Start a task to restart the service instance.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const restartService = <ThrowOnError extends boolean = false>(
    options: Options<RestartServiceData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<RestartServiceResponses, RestartServiceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/restart/{serviceId}',
        ...options,
    });
};

/**
 * Create a job to recreate the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const recreateService = <ThrowOnError extends boolean = false>(
    options: Options<RecreateServiceData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<RecreateServiceResponses, RecreateServiceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/recreate/{serviceId}',
        ...options,
    });
};

/**
 * Create an order to update service object using object id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const deleteServiceObject = <ThrowOnError extends boolean = false>(
    options: Options<DeleteServiceObjectData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteServiceObjectResponses,
        DeleteServiceObjectErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/object/{serviceId}/{objectId}',
        ...options,
    });
};

/**
 * Create an order to update service object using object id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const updateServiceObject = <ThrowOnError extends boolean = false>(
    options: Options<UpdateServiceObjectData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<UpdateServiceObjectResponses, UpdateServiceObjectErrors, ThrowOnError>(
        {
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/xpanse/services/object/{serviceId}/{objectId}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        }
    );
};

/**
 * Create an order task to modify the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const modify = <ThrowOnError extends boolean = false>(options: Options<ModifyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ModifyResponses, ModifyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/modify/{serviceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Create an order to redeploy the failed service using service id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const redeployFailedDeployment = <ThrowOnError extends boolean = false>(
    options: Options<RedeployFailedDeploymentData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        RedeployFailedDeploymentResponses,
        RedeployFailedDeploymentErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/deploy/retry/{serviceId}',
        ...options,
    });
};

/**
 * Update the service's configuration to the registered service template.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const changeServiceConfiguration = <ThrowOnError extends boolean = false>(
    options: Options<ChangeServiceConfigurationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        ChangeServiceConfigurationResponses,
        ChangeServiceConfigurationErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/config/{serviceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Change the lock config of the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const changeServiceLockConfig = <ThrowOnError extends boolean = false>(
    options: Options<ChangeServiceLockConfigData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        ChangeServiceLockConfigResponses,
        ChangeServiceLockConfigErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/changelock/{serviceId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Create Service Actions.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const createServiceAction = <ThrowOnError extends boolean = false>(
    options: Options<CreateServiceActionData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<CreateServiceActionResponses, CreateServiceActionErrors, ThrowOnError>(
        {
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/xpanse/services/action/{serviceId}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        }
    );
};

/**
 * Delete service template not in catalog using id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const deleteServiceTemplate = <ThrowOnError extends boolean = false>(
    options: Options<DeleteServiceTemplateData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteServiceTemplateResponses,
        DeleteServiceTemplateErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Get service template using id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const getServiceTemplateDetailsById = <ThrowOnError extends boolean = false>(
    options: Options<GetServiceTemplateDetailsByIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServiceTemplateDetailsByIdResponses,
        GetServiceTemplateDetailsByIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Updates an existing service template using Ocl model.  When the request is approved, the updated service template will be published to catalog.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const update = <ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateResponses, UpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/{serviceTemplateId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Remove the service template from catalog.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const unpublish = <ThrowOnError extends boolean = false>(options: Options<UnpublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UnpublishResponses, UnpublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/unpublish/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Cancel service template request using request id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const cancelServiceTemplateRequestByRequestId = <ThrowOnError extends boolean = false>(
    options: Options<CancelServiceTemplateRequestByRequestIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        CancelServiceTemplateRequestByRequestIdResponses,
        CancelServiceTemplateRequestByRequestIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/requests/cancel/{requestId}',
        ...options,
    });
};

/**
 * Publishes the same service template to catalog again.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const republish = <ThrowOnError extends boolean = false>(options: Options<RepublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RepublishResponses, RepublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/republish/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Updates an existing service template using URL of Ocl file. When the request is approved, the updated service template will be published to catalog.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const fetchUpdate = <ThrowOnError extends boolean = false>(options: Options<FetchUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<FetchUpdateResponses, FetchUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/file/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Delete the policy belongs to the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const deleteServicePolicy = <ThrowOnError extends boolean = false>(
    options: Options<DeleteServicePolicyData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteServicePolicyResponses,
        DeleteServicePolicyErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service/policies/{servicePolicyId}',
        ...options,
    });
};

/**
 * Get details of policy belongs to the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const getServicePolicyDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetServicePolicyDetailsData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServicePolicyDetailsResponses,
        GetServicePolicyDetailsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service/policies/{servicePolicyId}',
        ...options,
    });
};

/**
 * Update the policy belongs to the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const updateServicePolicy = <ThrowOnError extends boolean = false>(
    options: Options<UpdateServicePolicyData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<UpdateServicePolicyResponses, UpdateServicePolicyErrors, ThrowOnError>(
        {
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/xpanse/service/policies/{servicePolicyId}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        }
    );
};

/**
 * Delete the policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const deleteUserPolicy = <ThrowOnError extends boolean = false>(
    options: Options<DeleteUserPolicyData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserPolicyResponses, DeleteUserPolicyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/policies/{userPolicyId}',
        ...options,
    });
};

/**
 * Get the details of the policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getPolicyDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetPolicyDetailsData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<GetPolicyDetailsResponses, GetPolicyDetailsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/policies/{userPolicyId}',
        ...options,
    });
};

/**
 * Update the policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const updateUserPolicy = <ThrowOnError extends boolean = false>(
    options: Options<UpdateUserPolicyData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<UpdateUserPolicyResponses, UpdateUserPolicyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/policies/{userPolicyId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Delete the credentials of the user in the USER role to connect to the cloud service provider.<br> Required role: <b>isv</b> </br>
 */
export const deleteIsvCloudCredential = <ThrowOnError extends boolean = false>(
    options: Options<DeleteIsvCloudCredentialData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteIsvCloudCredentialResponses,
        DeleteIsvCloudCredentialErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/isv/credentials',
        ...options,
    });
};

/**
 * Users in the ISV role get all cloud provider credentials added by the user for a cloud service provider.<br> Required role: <b>isv</b> </br>
 */
export const getIsvCloudCredentials = <ThrowOnError extends boolean = false>(
    options?: Options<GetIsvCloudCredentialsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetIsvCloudCredentialsResponses,
        GetIsvCloudCredentialsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/isv/credentials',
        ...options,
    });
};

/**
 * Add the user credentials for the ISV role used to connect to the cloud service provider.<br> Required role: <b>isv</b> </br>
 */
export const addIsvCloudCredential = <ThrowOnError extends boolean = false>(
    options: Options<AddIsvCloudCredentialData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        AddIsvCloudCredentialResponses,
        AddIsvCloudCredentialErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/isv/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Update the user credentials used for ISV to connect to the cloud service provider.<br> Required role: <b>isv</b> </br>
 */
export const updateIsvCloudCredential = <ThrowOnError extends boolean = false>(
    options: Options<UpdateIsvCloudCredentialData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        UpdateIsvCloudCredentialResponses,
        UpdateIsvCloudCredentialErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/isv/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Submit review result for a service template request.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 */
export const reviewServiceTemplateRequest = <ThrowOnError extends boolean = false>(
    options: Options<ReviewServiceTemplateRequestData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        ReviewServiceTemplateRequestResponses,
        ReviewServiceTemplateRequestErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/service_templates/requests/review/{requestId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Update service change result for agents.
 */
export const updateServiceChangeResult = <ThrowOnError extends boolean = false>(
    options: Options<UpdateServiceChangeResultData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        UpdateServiceChangeResultResponses,
        UpdateServiceChangeResultErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/agent/xpanse/update/status/{changeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * List all deployed services belongs to the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getAllDeployedServices = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllDeployedServicesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAllDeployedServicesResponses,
        GetAllDeployedServicesErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services',
        ...options,
    });
};

/**
 * Create an order task to deploy new service using approved service template.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const deploy = <ThrowOnError extends boolean = false>(options: Options<DeployData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeployResponses, DeployErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Create a job to port the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const port = <ThrowOnError extends boolean = false>(options: Options<PortData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PortResponses, PortErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/porting',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Create an order to create object for the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const createServiceObject = <ThrowOnError extends boolean = false>(
    options: Options<CreateServiceObjectData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        CreateServiceObjectResponses,
        CreateServiceObjectErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/object/{serviceId}/{objectType}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * List service templates with query params.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const getAllServiceTemplatesByIsv = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllServiceTemplatesByIsvData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAllServiceTemplatesByIsvResponses,
        GetAllServiceTemplatesByIsvErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates',
        ...options,
    });
};

/**
 * Submits a new service template using Ocl model. When the request is approved, the service template will be published to catalog.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Submits a new service template using URL of Ocl file. When the request is approved, the service template will be published to catalog.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const fetch = <ThrowOnError extends boolean = false>(options: Options<FetchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FetchResponses, FetchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/file',
        ...options,
    });
};

/**
 * List the policies belongs to the service.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const getAllServicePolicies = <ThrowOnError extends boolean = false>(
    options: Options<GetAllServicePoliciesData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetAllServicePoliciesResponses,
        GetAllServicePoliciesErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service/policies',
        ...options,
    });
};

/**
 * Add policy for the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const addServicePolicy = <ThrowOnError extends boolean = false>(
    options: Options<AddServicePolicyData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<AddServicePolicyResponses, AddServicePolicyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service/policies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * List the policies defined by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getAllUserPolicies = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllUserPoliciesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<GetAllUserPoliciesResponses, GetAllUserPoliciesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/policies',
        ...options,
    });
};

/**
 * Add policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const addUserPolicy = <ThrowOnError extends boolean = false>(
    options: Options<AddUserPolicyData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<AddUserPolicyResponses, AddUserPolicyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/policies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers,
        },
    });
};

/**
 * Query all tasks of the given user<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const queryTasks = <ThrowOnError extends boolean = false>(options?: Options<QueryTasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QueryTasksResponses, QueryTasksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/workflow/tasks',
        ...options,
    });
};

/**
 * Check health of API service and backend systems.<br> Required role: <b>admin</b> </br>
 */
export const stackHealthStatus = <ThrowOnError extends boolean = false>(
    options?: Options<StackHealthStatusData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<StackHealthStatusResponses, StackHealthStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/stack/health',
        ...options,
    });
};

/**
 * Get service template details by service id.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getOrderableServiceDetailsByServiceId = <ThrowOnError extends boolean = false>(
    options: Options<GetOrderableServiceDetailsByServiceIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetOrderableServiceDetailsByServiceIdResponses,
        GetOrderableServiceDetailsByServiceIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/{serviceId}/service_template',
        ...options,
    });
};

/**
 * List compute resources of the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getComputeResourceInventoryOfService = <ThrowOnError extends boolean = false>(
    options: Options<GetComputeResourceInventoryOfServiceData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetComputeResourceInventoryOfServiceResponses,
        GetComputeResourceInventoryOfServiceErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/{serviceId}/resources/compute',
        ...options,
    });
};

/**
 * Delete all service orders of the service.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const deleteOrdersByServiceId = <ThrowOnError extends boolean = false>(
    options: Options<DeleteOrdersByServiceIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteOrdersByServiceIdResponses,
        DeleteOrdersByServiceIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/{serviceId}/orders',
        ...options,
    });
};

/**
 * List service orders of the service<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getAllOrdersByServiceId = <ThrowOnError extends boolean = false>(
    options: Options<GetAllOrdersByServiceIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetAllOrdersByServiceIdResponses,
        GetAllOrdersByServiceIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/{serviceId}/orders',
        ...options,
    });
};

/**
 * Long-polling method to get the latest service deployment or service update status.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getLatestServiceDeploymentStatus = <ThrowOnError extends boolean = false>(
    options: Options<GetLatestServiceDeploymentStatusData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetLatestServiceDeploymentStatusResponses,
        GetLatestServiceDeploymentStatusErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/{serviceId}/deployment/status',
        ...options,
    });
};

/**
 * Delete the service order by the order id.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const deleteOrderByOrderId = <ThrowOnError extends boolean = false>(
    options: Options<DeleteOrderByOrderIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).delete<
        DeleteOrderByOrderIdResponses,
        DeleteOrderByOrderIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/orders/{orderId}',
        ...options,
    });
};

/**
 * Get details of the service order by the order id.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getOrderDetailsByOrderId = <ThrowOnError extends boolean = false>(
    options: Options<GetOrderDetailsByOrderIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetOrderDetailsByOrderIdResponses,
        GetOrderDetailsByOrderIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/orders/{orderId}',
        ...options,
    });
};

/**
 * Long-polling method to get the latest or updated task status of the service order.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getLatestServiceOrderStatus = <ThrowOnError extends boolean = false>(
    options: Options<GetLatestServiceOrderStatusData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetLatestServiceOrderStatusResponses,
        GetLatestServiceOrderStatusErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/orders/{orderId}/status',
        ...options,
    });
};

/**
 * Get all objects of the service grouped by type.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getObjectsByServiceId = <ThrowOnError extends boolean = false>(
    options: Options<GetObjectsByServiceIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetObjectsByServiceIdResponses,
        GetObjectsByServiceIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/objects/{serviceId}',
        ...options,
    });
};

/**
 * List services of an ISV deployed by users. <br> Required role: <b>isv</b> </br>
 */
export const getAllDeployedServicesByIsv = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllDeployedServicesByIsvData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAllDeployedServicesByIsvResponses,
        GetAllDeployedServicesByIsvErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/isv',
        ...options,
    });
};

/**
 * Get the details of the deployed service by service id.<br> Required role: <b>isv</b> </br>
 */
export const getServiceDetailsByIdForIsv = <ThrowOnError extends boolean = false>(
    options: Options<GetServiceDetailsByIdForIsvData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServiceDetailsByIdForIsvResponses,
        GetServiceDetailsByIdForIsvErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/isv/details/vendor_hosted/{serviceId}',
        ...options,
    });
};

/**
 * List details of deployed services using parameters.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getAllDeployedServicesWithDetails = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllDeployedServicesWithDetailsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAllDeployedServicesWithDetailsResponses,
        GetAllDeployedServicesWithDetailsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/details',
        ...options,
    });
};

/**
 * Get deployed service details by serviceId.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getVendorHostedServiceDetailsById = <ThrowOnError extends boolean = false>(
    options: Options<GetVendorHostedServiceDetailsByIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetVendorHostedServiceDetailsByIdResponses,
        GetVendorHostedServiceDetailsByIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/details/vendor_hosted/{serviceId}',
        ...options,
    });
};

/**
 * Get details of the deployed service by id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getSelfHostedServiceDetailsById = <ThrowOnError extends boolean = false>(
    options: Options<GetSelfHostedServiceDetailsByIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetSelfHostedServiceDetailsByIdResponses,
        GetSelfHostedServiceDetailsByIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/details/self_hosted/{serviceId}',
        ...options,
    });
};

/**
 * List of services deployed on a cloud provider.<br> Required role: <b>csp</b> </br>
 */
export const getAllDeployedServicesByCsp = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllDeployedServicesByCspData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAllDeployedServicesByCspResponses,
        GetAllDeployedServicesByCspErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/csp',
        ...options,
    });
};

/**
 * List service's change details Request.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getServiceChangeRequestDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetServiceChangeRequestDetailsData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServiceChangeRequestDetailsResponses,
        GetServiceChangeRequestDetailsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/change/requests',
        ...options,
    });
};

/**
 * Get service template requests using id of service template. The returned requests is sorted in descending order according to the requested time.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const getServiceTemplateRequestHistoryForIsv = <ThrowOnError extends boolean = false>(
    options: Options<GetServiceTemplateRequestHistoryForIsvData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServiceTemplateRequestHistoryForIsvResponses,
        GetServiceTemplateRequestHistoryForIsvErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/{serviceTemplateId}/requests',
        ...options,
    });
};

/**
 * Get requested service template request using request id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 */
export const getRequestedServiceTemplateByRequestId = <ThrowOnError extends boolean = false>(
    options: Options<GetRequestedServiceTemplateByRequestIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetRequestedServiceTemplateByRequestIdResponses,
        GetRequestedServiceTemplateByRequestIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service_templates/requests/{requestId}',
        ...options,
    });
};

/**
 * Query the service's current configuration by id of the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getCurrentConfigurationOfService = <ThrowOnError extends boolean = false>(
    options: Options<GetCurrentConfigurationOfServiceData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetCurrentConfigurationOfServiceResponses,
        GetCurrentConfigurationOfServiceErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/service/current/config/{serviceId}',
        ...options,
    });
};

/**
 * Get the price of one specific flavor of the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getServicePriceByFlavor = <ThrowOnError extends boolean = false>(
    options: Options<GetServicePriceByFlavorData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServicePriceByFlavorResponses,
        GetServicePriceByFlavorErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/pricing/{serviceTemplateId}/{regionName}/{siteName}/{billingMode}/{flavorName}',
        ...options,
    });
};

/**
 * Get the prices of all flavors of the service<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getPricesByService = <ThrowOnError extends boolean = false>(
    options: Options<GetPricesByServiceData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<GetPricesByServiceResponses, GetPricesByServiceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/pricing/service/{serviceTemplateId}/{regionName}/{siteName}/{billingMode}',
        ...options,
    });
};

/**
 * Get metrics of a deployed service or a resource.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getMetrics = <ThrowOnError extends boolean = false>(options: Options<GetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMetricsResponses, GetMetricsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/metrics',
        ...options,
    });
};

/**
 * Check only health status of API service and backend systems.<br> Required role: <b>admin</b> or <b>csp</b> or <b>isv</b> or <b>user</b> </br>
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponses, HealthCheckErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/health',
        ...options,
    });
};

/**
 * List the sites of the cloud service provider.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 */
export const getSitesOfCsp = <ThrowOnError extends boolean = false>(
    options: Options<GetSitesOfCspData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<GetSitesOfCspResponses, GetSitesOfCspErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csps/{cspName}/sites',
        ...options,
    });
};

/**
 * List cloud service providers with active plugin.<br> Required role: <b>admin</b> or <b>csp</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getActiveCsps = <ThrowOnError extends boolean = false>(
    options?: Options<GetActiveCspsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<GetActiveCspsResponses, GetActiveCspsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csps/active',
        ...options,
    });
};

/**
 * List managed service templates with query params.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 */
export const getAllServiceTemplates = <ThrowOnError extends boolean = false>(
    options?: Options<GetAllServiceTemplatesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetAllServiceTemplatesResponses,
        GetAllServiceTemplatesErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/service_templates',
        ...options,
    });
};

/**
 * view service template by id.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 */
export const getServiceTemplateDetails = <ThrowOnError extends boolean = false>(
    options: Options<GetServiceTemplateDetailsData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServiceTemplateDetailsResponses,
        GetServiceTemplateDetailsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/service_templates/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Get service template requests using id of service template. The returned requests is sorted in descending order according to the requested time.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 */
export const getServiceTemplateRequestHistoryForCsp = <ThrowOnError extends boolean = false>(
    options: Options<GetServiceTemplateRequestHistoryForCspData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetServiceTemplateRequestHistoryForCspResponses,
        GetServiceTemplateRequestHistoryForCspErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/service_templates/{serviceTemplateId}/requests',
        ...options,
    });
};

/**
 * Get service template requests pending to review.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 */
export const getPendingServiceReviewRequests = <ThrowOnError extends boolean = false>(
    options?: Options<GetPendingServiceReviewRequestsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetPendingServiceReviewRequestsResponses,
        GetPendingServiceReviewRequestsErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/service_templates/requests/pending',
        ...options,
    });
};

/**
 * List existing cloud resource names with kind<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getExistingResourceNamesWithKind = <ThrowOnError extends boolean = false>(
    options: Options<GetExistingResourceNamesWithKindData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetExistingResourceNamesWithKindResponses,
        GetExistingResourceNamesWithKindErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/resources/{deployResourceKind}',
        ...options,
    });
};

/**
 * Get availability zones with csp and region.<br> Required role: <b>admin</b> or <b>csp</b> or <b>isv</b> or <b>user</b> </br>
 */
export const getAvailabilityZones = <ThrowOnError extends boolean = false>(
    options: Options<GetAvailabilityZonesData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetAvailabilityZonesResponses,
        GetAvailabilityZonesErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/csp/region/azs',
        ...options,
    });
};

/**
 * Returns the OpenAPI document for adding a credential.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 */
export const getCredentialOpenApi = <ThrowOnError extends boolean = false>(
    options: Options<GetCredentialOpenApiData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetCredentialOpenApiResponses,
        GetCredentialOpenApiErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/credentials/openapi/{csp}/{type}',
        ...options,
    });
};

/**
 * List the credential capabilities defined by the cloud service provider.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 */
export const getCredentialCapabilities = <ThrowOnError extends boolean = false>(
    options: Options<GetCredentialCapabilitiesData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetCredentialCapabilitiesResponses,
        GetCredentialCapabilitiesErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/credentials/capabilities',
        ...options,
    });
};

/**
 * List the credential types supported by the cloud service provider.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 */
export const getCredentialTypes = <ThrowOnError extends boolean = false>(
    options?: Options<GetCredentialTypesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<GetCredentialTypesResponses, GetCredentialTypesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/credential_types',
        ...options,
    });
};

/**
 * List of all approved services which are available for user to order.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getOrderableServices = <ThrowOnError extends boolean = false>(
    options?: Options<GetOrderableServicesData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        GetOrderableServicesResponses,
        GetOrderableServicesErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/catalog/services',
        ...options,
    });
};

/**
 * Get deployable service by id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const getOrderableServiceDetailsById = <ThrowOnError extends boolean = false>(
    options: Options<GetOrderableServiceDetailsByIdData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetOrderableServiceDetailsByIdResponses,
        GetOrderableServiceDetailsByIdErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/catalog/services/{serviceTemplateId}',
        ...options,
    });
};

/**
 * Get the API document of the orderable service.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 */
export const openApi = <ThrowOnError extends boolean = false>(options: Options<OpenApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OpenApiResponses, OpenApiErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/catalog/services/{serviceTemplateId}/openapi',
        ...options,
    });
};

/**
 * Get token info by authorization code.
 */
export const getAccessToken = <ThrowOnError extends boolean = false>(
    options: Options<GetAccessTokenData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<GetAccessTokenResponses, GetAccessTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/auth/token',
        ...options,
    });
};

/**
 * Get and redirect authorization url for user to authenticate.
 */
export const authorize = <ThrowOnError extends boolean = false>(options?: Options<AuthorizeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AuthorizeResponses, AuthorizeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/auth/authorize',
        ...options,
    });
};

/**
 * Get pending service change request for agents to poll.
 */
export const getPendingServiceChangeRequest = <ThrowOnError extends boolean = false>(
    options: Options<GetPendingServiceChangeRequestData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GetPendingServiceChangeRequestResponses,
        GetPendingServiceChangeRequestErrors,
        ThrowOnError
    >({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/agent/xpanse/poll/{serviceId}/{resourceName}',
        ...options,
    });
};

/**
 * Create an order task to destroy the deployed service using id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const destroy = <ThrowOnError extends boolean = false>(options: Options<DestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DestroyResponses, DestroyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/{serviceId}',
        ...options,
    });
};

/**
 * Create an order task to purge the deployed service using service id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 */
export const purge = <ThrowOnError extends boolean = false>(options: Options<PurgeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PurgeResponses, PurgeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http',
            },
        ],
        url: '/xpanse/services/purge/{serviceId}',
        ...options,
    });
};
