/*
 * SPDX-License-Identifier: Apache-2.0
 * SPDX-FileCopyrightText: Huawei Inc.
 */

// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
    AddIsvCloudCredentialData,
    AddIsvCloudCredentialResponse,
    AddServicePolicyData,
    AddServicePolicyResponse,
    AddUserCloudCredentialData,
    AddUserCloudCredentialResponse,
    AddUserPolicyData,
    AddUserPolicyResponse,
    AuthorizeResponse,
    ChangeServiceConfigurationData,
    ChangeServiceConfigurationResponse,
    ChangeServiceLockConfigData,
    ChangeServiceLockConfigResponse,
    CompleteTaskData,
    CompleteTaskResponse,
    DeleteIsvCloudCredentialData,
    DeleteIsvCloudCredentialResponse,
    DeleteOrderByOrderIdData,
    DeleteOrderByOrderIdResponse,
    DeleteOrdersByServiceIdData,
    DeleteOrdersByServiceIdResponse,
    DeleteServicePolicyData,
    DeleteServicePolicyResponse,
    DeleteServiceTemplateData,
    DeleteServiceTemplateResponse,
    DeleteUserCloudCredentialData,
    DeleteUserCloudCredentialResponse,
    DeleteUserPolicyData,
    DeleteUserPolicyResponse,
    DeployData,
    DeployResponse,
    DestroyData,
    DestroyResponse,
    DetailsData,
    DetailsResponse,
    FetchData,
    FetchResponse,
    FetchUpdateData,
    FetchUpdateResponse,
    GetAccessTokenData,
    GetAccessTokenResponse,
    GetActiveCspsResponse,
    GetAllOrdersByServiceIdData,
    GetAllOrdersByServiceIdResponse,
    GetAllServiceConfigurationChangeDetailsData,
    GetAllServiceConfigurationChangeDetailsResponse,
    GetAvailabilityZonesData,
    GetAvailabilityZonesResponse,
    GetComputeResourceInventoryOfServiceData,
    GetComputeResourceInventoryOfServiceResponse,
    GetCredentialCapabilitiesData,
    GetCredentialCapabilitiesResponse,
    GetCredentialOpenApiData,
    GetCredentialOpenApiResponse,
    GetCredentialTypesData,
    GetCredentialTypesResponse,
    GetCurrentConfigurationOfServiceData,
    GetCurrentConfigurationOfServiceResponse,
    GetExistingResourceNamesWithKindData,
    GetExistingResourceNamesWithKindResponse,
    GetIsvCloudCredentialsData,
    GetIsvCloudCredentialsResponse,
    GetLatestServiceDeploymentStatusData,
    GetLatestServiceDeploymentStatusResponse,
    GetLatestServiceOrderStatusData,
    GetLatestServiceOrderStatusResponse,
    GetMetricsData,
    GetMetricsResponse,
    GetMigrationOrderDetailsByIdData,
    GetMigrationOrderDetailsByIdResponse,
    GetOrderableServiceDetailsData,
    GetOrderableServiceDetailsResponse,
    GetOrderDetailsByOrderIdData,
    GetOrderDetailsByOrderIdResponse,
    GetPendingConfigurationChangeRequestData,
    GetPendingConfigurationChangeRequestResponse,
    GetPolicyDetailsData,
    GetPolicyDetailsResponse,
    GetPricesByServiceData,
    GetPricesByServiceResponse,
    GetRecreateOrderDetailsByIdData,
    GetRecreateOrderDetailsByIdResponse,
    GetRegistrationDetailsData,
    GetRegistrationDetailsResponse,
    GetSelfHostedServiceDetailsByIdData,
    GetSelfHostedServiceDetailsByIdResponse,
    GetServiceDetailsByIdForIsvData,
    GetServiceDetailsByIdForIsvResponse,
    GetServicePolicyDetailsData,
    GetServicePolicyDetailsResponse,
    GetServicePriceByFlavorData,
    GetServicePriceByFlavorResponse,
    GetSitesOfCspData,
    GetSitesOfCspResponse,
    GetUserCloudCredentialsData,
    GetUserCloudCredentialsResponse,
    GetVendorHostedServiceDetailsByIdData,
    GetVendorHostedServiceDetailsByIdResponse,
    HealthCheckResponse,
    ListDeployedServicesData,
    ListDeployedServicesDetailsData,
    ListDeployedServicesDetailsResponse,
    ListDeployedServicesOfIsvData,
    ListDeployedServicesOfIsvResponse,
    ListDeployedServicesResponse,
    ListManagedServiceTemplatesData,
    ListManagedServiceTemplatesResponse,
    ListOrderableServicesData,
    ListOrderableServicesResponse,
    ListServiceMigrationsData,
    ListServiceMigrationsResponse,
    ListServicePoliciesData,
    ListServicePoliciesResponse,
    ListServiceRecreatesData,
    ListServiceRecreatesResponse,
    ListServiceTemplatesData,
    ListServiceTemplatesResponse,
    ListUserPoliciesData,
    ListUserPoliciesResponse,
    ManageFailedOrderData,
    ManageFailedOrderResponse,
    MigrateData,
    MigrateResponse,
    ModifyData,
    ModifyResponse,
    OpenApiData,
    OpenApiResponse,
    PurgeData,
    PurgeResponse,
    QueryTasksData,
    QueryTasksResponse,
    RecreateServiceData,
    RecreateServiceResponse,
    RedeployFailedDeploymentData,
    RedeployFailedDeploymentResponse,
    RegisterData,
    RegisterResponse,
    ReRegisterServiceTemplateData,
    ReRegisterServiceTemplateResponse,
    RestartServiceData,
    RestartServiceResponse,
    ReviewRegistrationData,
    ReviewRegistrationResponse,
    StartServiceData,
    StartServiceResponse,
    StopServiceData,
    StopServiceResponse,
    UnregisterData,
    UnregisterResponse,
    UpdateConfigurationChangeResultData,
    UpdateConfigurationChangeResultResponse,
    UpdateData,
    UpdateIsvCloudCredentialData,
    UpdateIsvCloudCredentialResponse,
    UpdateResponse,
    UpdateServicePolicyData,
    UpdateServicePolicyResponse,
    UpdateUserCloudCredentialData,
    UpdateUserCloudCredentialResponse,
    UpdateUserPolicyData,
    UpdateUserPolicyResponse,
} from './types.gen';

/**
 * Manage failed task orders.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id ID of the workflow task that needs to be handled
 * @param data.retryOrder Controls if the order must be retried again or simply closed.
 * @returns unknown OK
 * @throws ApiError
 */
export const manageFailedOrder = (data: ManageFailedOrderData): CancelablePromise<ManageFailedOrderResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/workflow/task/{id}',
        path: {
            id: data.id,
        },
        query: {
            retryOrder: data.retryOrder,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Complete tasks by task ID and set global process variables .<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id ID of the workflow task that needs to be handled
 * @param data.requestBody
 * @returns unknown OK
 * @throws ApiError
 */
export const completeTask = (data: CompleteTaskData): CancelablePromise<CompleteTaskResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/workflow/complete/task/{id}',
        path: {
            id: data.id,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List all cloud provider credentials added by the user for a cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName The cloud service provider.
 * @param data.type The type of credential.
 * @returns AbstractCredentialInfo OK
 * @throws ApiError
 */
export const getUserCloudCredentials = (
    data: GetUserCloudCredentialsData = {}
): CancelablePromise<GetUserCloudCredentialsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/user/credentials',
        query: {
            cspName: data.cspName,
            type: data.type,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update user's credential for connecting to the cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const updateUserCloudCredential = (
    data: UpdateUserCloudCredentialData
): CancelablePromise<UpdateUserCloudCredentialResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/user/credentials',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Add user's credential for connecting to the cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const addUserCloudCredential = (
    data: AddUserCloudCredentialData
): CancelablePromise<AddUserCloudCredentialResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/user/credentials',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete user's credential for connecting to the cloud service provider.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName The cloud service provider.
 * @param data.siteName The site of the provider.
 * @param data.type The type of credential.
 * @param data.name The name of of credential.
 * @returns void No Content
 * @throws ApiError
 */
export const deleteUserCloudCredential = (
    data: DeleteUserCloudCredentialData
): CancelablePromise<DeleteUserCloudCredentialResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/user/credentials',
        query: {
            cspName: data.cspName,
            siteName: data.siteName,
            type: data.type,
            name: data.name,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Start a task to stop the service instance.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const stopService = (data: StopServiceData): CancelablePromise<StopServiceResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/stop/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Start a task to start the service instance.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const startService = (data: StartServiceData): CancelablePromise<StartServiceResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/start/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Start a task to restart the service instance.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const restartService = (data: RestartServiceData): CancelablePromise<RestartServiceResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/restart/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Create a job to recreate the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId
 * @returns string Accepted
 * @throws ApiError
 */
export const recreateService = (data: RecreateServiceData): CancelablePromise<RecreateServiceResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/recreate/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Create an order task to modify the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @param data.requestBody
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const modify = (data: ModifyData): CancelablePromise<ModifyResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/modify/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: '',
            401: '',
            403: '',
            408: '',
            422: '',
            500: '',
            502: '',
        },
    });
};

/**
 * Create an order to redeploy the failed service using service id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const redeployFailedDeployment = (
    data: RedeployFailedDeploymentData
): CancelablePromise<RedeployFailedDeploymentResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/deploy/retry/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: '',
            401: '',
            403: '',
            408: '',
            422: '',
            500: '',
            502: '',
        },
    });
};

/**
 * Update the service's configuration to the registered service template.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId The id of the deployed service
 * @param data.requestBody
 * @returns ServiceOrder OK
 * @throws ApiError
 */
export const changeServiceConfiguration = (
    data: ChangeServiceConfigurationData
): CancelablePromise<ChangeServiceConfigurationResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/config/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Change the lock config of the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const changeServiceLockConfig = (
    data: ChangeServiceLockConfigData
): CancelablePromise<ChangeServiceLockConfigResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/services/changelock/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get service template using id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const details = (data: DetailsData): CancelablePromise<DetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/service_templates/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update service template using id and ocl model.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @param data.requestBody
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const update = (data: UpdateData): CancelablePromise<UpdateResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/service_templates/{id}',
        path: {
            id: data.id,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete unregistered service template using id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @returns void No Content
 * @throws ApiError
 */
export const deleteServiceTemplate = (
    data: DeleteServiceTemplateData
): CancelablePromise<DeleteServiceTemplateResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/service_templates/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Unregister service template using id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const unregister = (data: UnregisterData): CancelablePromise<UnregisterResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/service_templates/unregister/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Review service template registration.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const reviewRegistration = (data: ReviewRegistrationData): CancelablePromise<ReviewRegistrationResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/service_templates/review/{id}',
        path: {
            id: data.id,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Re-register the unregistered service template using id.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const reRegisterServiceTemplate = (
    data: ReRegisterServiceTemplateData
): CancelablePromise<ReRegisterServiceTemplateResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/service_templates/re-register/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update service template using id and URL of Ocl file.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @param data.oclLocation URL of Ocl file
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const fetchUpdate = (data: FetchUpdateData): CancelablePromise<FetchUpdateResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/service_templates/file/{id}',
        path: {
            id: data.id,
        },
        query: {
            oclLocation: data.oclLocation,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get details of policy belongs to the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id
 * @returns ServicePolicy OK
 * @throws ApiError
 */
export const getServicePolicyDetails = (
    data: GetServicePolicyDetailsData
): CancelablePromise<GetServicePolicyDetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/service/policies/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update the policy belongs to the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id ID of the policy to be updated
 * @param data.requestBody
 * @returns ServicePolicy OK
 * @throws ApiError
 */
export const updateServicePolicy = (data: UpdateServicePolicyData): CancelablePromise<UpdateServicePolicyResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/service/policies/{id}',
        path: {
            id: data.id,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete the policy belongs to the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.id
 * @returns void No Content
 * @throws ApiError
 */
export const deleteServicePolicy = (data: DeleteServicePolicyData): CancelablePromise<DeleteServicePolicyResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/service/policies/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get the details of the policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id
 * @returns UserPolicy OK
 * @throws ApiError
 */
export const getPolicyDetails = (data: GetPolicyDetailsData): CancelablePromise<GetPolicyDetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/policies/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update the policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id ID of the policy to be updated
 * @param data.requestBody
 * @returns UserPolicy OK
 * @throws ApiError
 */
export const updateUserPolicy = (data: UpdateUserPolicyData): CancelablePromise<UpdateUserPolicyResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/policies/{id}',
        path: {
            id: data.id,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete the policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id
 * @returns void No Content
 * @throws ApiError
 */
export const deleteUserPolicy = (data: DeleteUserPolicyData): CancelablePromise<DeleteUserPolicyResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/policies/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Users in the ISV role get all cloud provider credentials added by the user for a cloud service provider.<br> Required role: <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.cspName The cloud service provider.
 * @param data.type The type of credential.
 * @returns AbstractCredentialInfo OK
 * @throws ApiError
 */
export const getIsvCloudCredentials = (
    data: GetIsvCloudCredentialsData = {}
): CancelablePromise<GetIsvCloudCredentialsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/isv/credentials',
        query: {
            cspName: data.cspName,
            type: data.type,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update the user credentials used for ISV to connect to the cloud service provider.<br> Required role: <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const updateIsvCloudCredential = (
    data: UpdateIsvCloudCredentialData
): CancelablePromise<UpdateIsvCloudCredentialResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/isv/credentials',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Add the user credentials for the ISV role used to connect to the cloud service provider.<br> Required role: <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const addIsvCloudCredential = (
    data: AddIsvCloudCredentialData
): CancelablePromise<AddIsvCloudCredentialResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/isv/credentials',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete the credentials of the user in the USER role to connect to the cloud service provider.<br> Required role: <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.cspName The cloud service provider.
 * @param data.siteName The site of the provider.
 * @param data.type The type of credential.
 * @param data.name The name of of credential.
 * @returns void No Content
 * @throws ApiError
 */
export const deleteIsvCloudCredential = (
    data: DeleteIsvCloudCredentialData
): CancelablePromise<DeleteIsvCloudCredentialResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/isv/credentials',
        query: {
            cspName: data.cspName,
            siteName: data.siteName,
            type: data.type,
            name: data.name,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Update configuration change result for agents.
 * @param data The data for the request.
 * @param data.changeId id of the update request.
 * @param data.requestBody
 * @returns void No Content
 * @throws ApiError
 */
export const updateConfigurationChangeResult = (
    data: UpdateConfigurationChangeResultData
): CancelablePromise<UpdateConfigurationChangeResultResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/xpanse/agent/update/status/{changeId}',
        path: {
            changeId: data.changeId,
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List all deployed services belongs to the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.categoryName category of the service
 * @param data.cspName name of the cloud service provider
 * @param data.serviceName name of the service
 * @param data.serviceVersion version of the service
 * @param data.serviceState deployment state of the service
 * @returns DeployedService OK
 * @throws ApiError
 */
export const listDeployedServices = (
    data: ListDeployedServicesData = {}
): CancelablePromise<ListDeployedServicesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services',
        query: {
            categoryName: data.categoryName,
            cspName: data.cspName,
            serviceName: data.serviceName,
            serviceVersion: data.serviceVersion,
            serviceState: data.serviceState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Create an order task to deploy new service using approved service template.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const deploy = (data: DeployData): CancelablePromise<DeployResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/services',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: '',
            401: '',
            403: '',
            408: '',
            422: '',
            500: '',
            502: '',
        },
    });
};

/**
 * Create a job to migrate the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns string Accepted
 * @throws ApiError
 */
export const migrate = (data: MigrateData): CancelablePromise<MigrateResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/services/migration',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List service templates with query params.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.categoryName category of the service
 * @param data.cspName name of the cloud service provider
 * @param data.serviceName name of the service
 * @param data.serviceVersion version of the service
 * @param data.serviceHostingType who hosts ths cloud resources
 * @param data.serviceRegistrationState state of registration
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const listServiceTemplates = (
    data: ListServiceTemplatesData = {}
): CancelablePromise<ListServiceTemplatesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/service_templates',
        query: {
            categoryName: data.categoryName,
            cspName: data.cspName,
            serviceName: data.serviceName,
            serviceVersion: data.serviceVersion,
            serviceHostingType: data.serviceHostingType,
            serviceRegistrationState: data.serviceRegistrationState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Register new service template using ocl model.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const register = (data: RegisterData): CancelablePromise<RegisterResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/service_templates',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Register new service template using URL of Ocl file.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.oclLocation URL of Ocl file
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const fetch = (data: FetchData): CancelablePromise<FetchResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/service_templates/file',
        query: {
            oclLocation: data.oclLocation,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List the policies belongs to the service.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.serviceTemplateId The id of registered service template which the policy belongs to.
 * @returns ServicePolicy OK
 * @throws ApiError
 */
export const listServicePolicies = (data: ListServicePoliciesData): CancelablePromise<ListServicePoliciesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/service/policies',
        query: {
            serviceTemplateId: data.serviceTemplateId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Add policy for the registered service template.<br> Required role: <b>admin</b> or <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ServicePolicy OK
 * @throws ApiError
 */
export const addServicePolicy = (data: AddServicePolicyData): CancelablePromise<AddServicePolicyResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/service/policies',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List the policies defined by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName Name of csp which the policy belongs to.
 * @param data.enabled Is the policy enabled.
 * @returns UserPolicy OK
 * @throws ApiError
 */
export const listUserPolicies = (data: ListUserPoliciesData = {}): CancelablePromise<ListUserPoliciesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/policies',
        query: {
            cspName: data.cspName,
            enabled: data.enabled,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Add policy created by the user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPolicy OK
 * @throws ApiError
 */
export const addUserPolicy = (data: AddUserPolicyData): CancelablePromise<AddUserPolicyResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/xpanse/policies',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Query all tasks of the given user<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.status the status of task
 * @returns WorkFlowTask OK
 * @throws ApiError
 */
export const queryTasks = (data: QueryTasksData = {}): CancelablePromise<QueryTasksResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/workflow/tasks',
        query: {
            status: data.status,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List compute resources of the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the deployed service
 * @returns DeployResource OK
 * @throws ApiError
 */
export const getComputeResourceInventoryOfService = (
    data: GetComputeResourceInventoryOfServiceData
): CancelablePromise<GetComputeResourceInventoryOfServiceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/{serviceId}/resources/compute',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List service orders of the service<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @param data.taskType Task type of the service order.
 * @param data.taskStatus Task status of the service order
 * @returns ServiceOrderDetails OK
 * @throws ApiError
 */
export const getAllOrdersByServiceId = (
    data: GetAllOrdersByServiceIdData
): CancelablePromise<GetAllOrdersByServiceIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/{serviceId}/orders',
        path: {
            serviceId: data.serviceId,
        },
        query: {
            taskType: data.taskType,
            taskStatus: data.taskStatus,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete all service orders of the service.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @returns void No Content
 * @throws ApiError
 */
export const deleteOrdersByServiceId = (
    data: DeleteOrdersByServiceIdData
): CancelablePromise<DeleteOrdersByServiceIdResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/services/{serviceId}/orders',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Long-polling method to get the latest service deployment or service update status.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId ID of the service
 * @param data.lastKnownServiceDeploymentState Last known service status to client. When provided, the service will wait for a configured period time until to see if there is a change to the last known state.
 * @returns DeploymentStatusUpdate OK
 * @throws ApiError
 */
export const getLatestServiceDeploymentStatus = (
    data: GetLatestServiceDeploymentStatusData
): CancelablePromise<GetLatestServiceDeploymentStatusResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/{serviceId}/deployment/status',
        path: {
            serviceId: data.serviceId,
        },
        query: {
            lastKnownServiceDeploymentState: data.lastKnownServiceDeploymentState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List all services recreate by a user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.recreateId Id of the service recreate
 * @param data.serviceId Id of the old service
 * @param data.recreateStatus Status of the service recreate
 * @returns ServiceRecreateDetails OK
 * @throws ApiError
 */
export const listServiceRecreates = (
    data: ListServiceRecreatesData = {}
): CancelablePromise<ListServiceRecreatesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/recreate',
        query: {
            recreateId: data.recreateId,
            serviceId: data.serviceId,
            recreateStatus: data.recreateStatus,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get recreate records based on recreate id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.recreateId Recreate ID
 * @returns ServiceRecreateDetails OK
 * @throws ApiError
 */
export const getRecreateOrderDetailsById = (
    data: GetRecreateOrderDetailsByIdData
): CancelablePromise<GetRecreateOrderDetailsByIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/recreate/{recreateId}',
        path: {
            recreateId: data.recreateId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get details of the service order by the order id.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.orderId Id of the service order
 * @returns ServiceOrderDetails OK
 * @throws ApiError
 */
export const getOrderDetailsByOrderId = (
    data: GetOrderDetailsByOrderIdData
): CancelablePromise<GetOrderDetailsByOrderIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/orders/{orderId}',
        path: {
            orderId: data.orderId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Delete the service order by the order id.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.orderId Id of the service order
 * @returns void No Content
 * @throws ApiError
 */
export const deleteOrderByOrderId = (
    data: DeleteOrderByOrderIdData
): CancelablePromise<DeleteOrderByOrderIdResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/services/orders/{orderId}',
        path: {
            orderId: data.orderId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Long-polling method to get the latest or updated task status of the service order.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.orderId Id of the service order
 * @param data.lastKnownServiceDeploymentState Last known service order task status to client. When provided, the service will wait for a configured period time until to see if there is a change to the last known state.
 * @returns ServiceOrderStatusUpdate OK
 * @throws ApiError
 */
export const getLatestServiceOrderStatus = (
    data: GetLatestServiceOrderStatusData
): CancelablePromise<GetLatestServiceOrderStatusResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/orders/{orderId}/status',
        path: {
            orderId: data.orderId,
        },
        query: {
            lastKnownServiceDeploymentState: data.lastKnownServiceDeploymentState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List all services migration by a user.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.migrationId Id of the service migrate
 * @param data.newServiceId Id of the new service
 * @param data.oldServiceId Id of the old service
 * @param data.migrationStatus Status of the service migrate
 * @returns ServiceMigrationDetails OK
 * @throws ApiError
 */
export const listServiceMigrations = (
    data: ListServiceMigrationsData = {}
): CancelablePromise<ListServiceMigrationsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/migrations',
        query: {
            migrationId: data.migrationId,
            newServiceId: data.newServiceId,
            oldServiceId: data.oldServiceId,
            migrationStatus: data.migrationStatus,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get migration records based on migration id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.migrationId Migration ID
 * @returns ServiceMigrationDetails OK
 * @throws ApiError
 */
export const getMigrationOrderDetailsById = (
    data: GetMigrationOrderDetailsByIdData
): CancelablePromise<GetMigrationOrderDetailsByIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/migration/{migrationId}',
        path: {
            migrationId: data.migrationId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List all deployed services by a user.<br> Required role: <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.categoryName category of the service
 * @param data.cspName name of the cloud service provider
 * @param data.serviceName name of the service
 * @param data.serviceVersion version of the service
 * @param data.serviceState deployment state of the service
 * @returns DeployedService OK
 * @throws ApiError
 */
export const listDeployedServicesOfIsv = (
    data: ListDeployedServicesOfIsvData = {}
): CancelablePromise<ListDeployedServicesOfIsvResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/isv',
        query: {
            categoryName: data.categoryName,
            cspName: data.cspName,
            serviceName: data.serviceName,
            serviceVersion: data.serviceVersion,
            serviceState: data.serviceState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get the details of the deployed service by service id.<br> Required role: <b>isv</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of deployed service
 * @returns DeployedServiceDetails OK
 * @throws ApiError
 */
export const getServiceDetailsByIdForIsv = (
    data: GetServiceDetailsByIdForIsvData
): CancelablePromise<GetServiceDetailsByIdForIsvResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/isv/details/vendor_hosted/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List details of deployed services using parameters.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.categoryName category of the service
 * @param data.cspName name of the cloud service provider
 * @param data.serviceName name of the service
 * @param data.serviceVersion version of the service
 * @param data.serviceState deployment state of the service
 * @returns DeployedService OK
 * @throws ApiError
 */
export const listDeployedServicesDetails = (
    data: ListDeployedServicesDetailsData = {}
): CancelablePromise<ListDeployedServicesDetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/details',
        query: {
            categoryName: data.categoryName,
            cspName: data.cspName,
            serviceName: data.serviceName,
            serviceVersion: data.serviceVersion,
            serviceState: data.serviceState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get deployed service details by serviceId.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @returns VendorHostedDeployedServiceDetails OK
 * @throws ApiError
 */
export const getVendorHostedServiceDetailsById = (
    data: GetVendorHostedServiceDetailsByIdData
): CancelablePromise<GetVendorHostedServiceDetailsByIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/details/vendor_hosted/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get details of the deployed service by id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @returns DeployedServiceDetails OK
 * @throws ApiError
 */
export const getSelfHostedServiceDetailsById = (
    data: GetSelfHostedServiceDetailsByIdData
): CancelablePromise<GetSelfHostedServiceDetailsByIdResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/details/self_hosted/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List service's configuration.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the deployed service
 * @param data.orderId id of the service order
 * @param data.resourceName name of the service resource
 * @param data.configManager Manager of the service configuration parameter.
 * @param data.status Status of the service configuration
 * @returns ServiceConfigurationChangeOrderDetails OK
 * @throws ApiError
 */
export const getAllServiceConfigurationChangeDetails = (
    data: GetAllServiceConfigurationChangeDetailsData
): CancelablePromise<GetAllServiceConfigurationChangeDetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/services/config/requests',
        query: {
            serviceId: data.serviceId,
            orderId: data.orderId,
            resourceName: data.resourceName,
            configManager: data.configManager,
            status: data.status,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Query the service's current configuration by id of the deployed service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId The id of the deployed service
 * @returns ServiceConfigurationDetails OK
 * @throws ApiError
 */
export const getCurrentConfigurationOfService = (
    data: GetCurrentConfigurationOfServiceData
): CancelablePromise<GetCurrentConfigurationOfServiceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/service/current/config/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get the price of one specific flavor of the service.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.templateId id of the service template
 * @param data.regionName region name of the service
 * @param data.siteName site name of the region belongs to
 * @param data.billingMode mode of billing
 * @param data.flavorName flavor name of the service
 * @returns FlavorPriceResult OK
 * @throws ApiError
 */
export const getServicePriceByFlavor = (
    data: GetServicePriceByFlavorData
): CancelablePromise<GetServicePriceByFlavorResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/pricing/{templateId}/{regionName}/{siteName}/{billingMode}/{flavorName}',
        path: {
            templateId: data.templateId,
            regionName: data.regionName,
            siteName: data.siteName,
            billingMode: data.billingMode,
            flavorName: data.flavorName,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get the prices of all flavors of the service<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.templateId id of the service template
 * @param data.regionName region name of the service
 * @param data.siteName site name of the region belongs to
 * @param data.billingMode mode of billing
 * @returns FlavorPriceResult OK
 * @throws ApiError
 */
export const getPricesByService = (data: GetPricesByServiceData): CancelablePromise<GetPricesByServiceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/pricing/service/{templateId}/{regionName}/{siteName}/{billingMode}',
        path: {
            templateId: data.templateId,
            regionName: data.regionName,
            siteName: data.siteName,
            billingMode: data.billingMode,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get metrics of a deployed service or a resource.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the deployed service
 * @param data.resourceId Id of resource in the deployed service
 * @param data.monitorResourceType Types of the monitor resource.
 * @param data.from Start UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the five minutes ago.
 * @param data.to End UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the current time.
 * @param data.granularity Return metrics collected in provided time interval. This depends on how the source systems have generated/collected metrics.
 * @param data.onlyLastKnownMetric Returns only the last known metric. When this parameter is set then all other query parameters are ignored.
 * @returns Metric OK
 * @throws ApiError
 */
export const getMetrics = (data: GetMetricsData): CancelablePromise<GetMetricsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/metrics',
        query: {
            serviceId: data.serviceId,
            resourceId: data.resourceId,
            monitorResourceType: data.monitorResourceType,
            from: data.from,
            to: data.to,
            granularity: data.granularity,
            onlyLastKnownMetric: data.onlyLastKnownMetric,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Check health of API service and backend systems.<br> Required role: <b>admin</b> or <b>csp</b> or <b>isv</b> or <b>user</b> </br>
 * @returns SystemStatus OK
 * @throws ApiError
 */
export const healthCheck = (): CancelablePromise<HealthCheckResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/health',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List the sites of the cloud service provider.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName The cloud service provider
 * @returns string OK
 * @throws ApiError
 */
export const getSitesOfCsp = (data: GetSitesOfCspData): CancelablePromise<GetSitesOfCspResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/csps/{cspName}/sites',
        path: {
            cspName: data.cspName,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List cloud service providers with active plugin.<br> Required role: <b>admin</b> or <b>csp</b> or <b>isv</b> or <b>user</b> </br>
 * @returns string OK
 * @throws ApiError
 */
export const getActiveCsps = (): CancelablePromise<GetActiveCspsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/csps/active',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List managed service templates with query params.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 * @param data The data for the request.
 * @param data.categoryName category of the service
 * @param data.serviceName name of the service
 * @param data.serviceVersion version of the service
 * @param data.serviceHostingType who hosts ths cloud resources
 * @param data.serviceRegistrationState state of registration
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const listManagedServiceTemplates = (
    data: ListManagedServiceTemplatesData = {}
): CancelablePromise<ListManagedServiceTemplatesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/csp/service_templates',
        query: {
            categoryName: data.categoryName,
            serviceName: data.serviceName,
            serviceVersion: data.serviceVersion,
            serviceHostingType: data.serviceHostingType,
            serviceRegistrationState: data.serviceRegistrationState,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * view service template by id.<br> Required role: <b>admin</b> or <b>csp</b> </br>
 * @param data The data for the request.
 * @param data.id id of service template
 * @returns ServiceTemplateDetailVo OK
 * @throws ApiError
 */
export const getRegistrationDetails = (
    data: GetRegistrationDetailsData
): CancelablePromise<GetRegistrationDetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/csp/service_templates/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List existing cloud resource names with kind<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.csp name of the cloud service provider
 * @param data.siteName the site of the service belongs to
 * @param data.regionName name of the region
 * @param data.deployResourceKind kind of the CloudResource
 * @param data.serviceId id of the deployed service
 * @returns string OK
 * @throws ApiError
 */
export const getExistingResourceNamesWithKind = (
    data: GetExistingResourceNamesWithKindData
): CancelablePromise<GetExistingResourceNamesWithKindResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/csp/resources/{deployResourceKind}',
        path: {
            deployResourceKind: data.deployResourceKind,
        },
        query: {
            csp: data.csp,
            siteName: data.siteName,
            regionName: data.regionName,
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get availability zones with csp and region.<br> Required role: <b>admin</b> or <b>csp</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName name of the cloud service provider
 * @param data.siteName site of the region belongs to
 * @param data.regionName name of the region
 * @param data.serviceId Id of the deployed service
 * @returns string OK
 * @throws ApiError
 */
export const getAvailabilityZones = (
    data: GetAvailabilityZonesData
): CancelablePromise<GetAvailabilityZonesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/csp/region/azs',
        query: {
            cspName: data.cspName,
            siteName: data.siteName,
            regionName: data.regionName,
            serviceId: data.serviceId,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Returns the OpenAPI document for adding a credential.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.csp The cloud service provider.
 * @param data.type The type of credential.
 * @returns Link OK
 * @throws ApiError
 */
export const getCredentialOpenApi = (
    data: GetCredentialOpenApiData
): CancelablePromise<GetCredentialOpenApiResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/credentials/openapi/{csp}/{type}',
        path: {
            csp: data.csp,
            type: data.type,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List the credential capabilities defined by the cloud service provider.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName name of the cloud service provider.
 * @param data.type The type of credential.
 * @param data.name The name of credential.
 * @returns AbstractCredentialInfo OK
 * @throws ApiError
 */
export const getCredentialCapabilities = (
    data: GetCredentialCapabilitiesData
): CancelablePromise<GetCredentialCapabilitiesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/credentials/capabilities',
        query: {
            cspName: data.cspName,
            type: data.type,
            name: data.name,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List the credential types supported by the cloud service provider.<br> Required role: <b>isv</b> or <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.cspName The cloud service provider.
 * @returns string OK
 * @throws ApiError
 */
export const getCredentialTypes = (
    data: GetCredentialTypesData = {}
): CancelablePromise<GetCredentialTypesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/credential_types',
        query: {
            cspName: data.cspName,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * List of all approved services which are available for user to order.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.categoryName category of the service
 * @param data.cspName name of the cloud service provider
 * @param data.serviceName name of the service
 * @param data.serviceVersion version of the service
 * @param data.serviceHostingType who hosts ths cloud resources
 * @returns UserOrderableServiceVo OK
 * @throws ApiError
 */
export const listOrderableServices = (
    data: ListOrderableServicesData = {}
): CancelablePromise<ListOrderableServicesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/catalog/services',
        query: {
            categoryName: data.categoryName,
            cspName: data.cspName,
            serviceName: data.serviceName,
            serviceVersion: data.serviceVersion,
            serviceHostingType: data.serviceHostingType,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get deployable service by id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id The id of orderable service.
 * @returns UserOrderableServiceVo OK
 * @throws ApiError
 */
export const getOrderableServiceDetails = (
    data: GetOrderableServiceDetailsData
): CancelablePromise<GetOrderableServiceDetailsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/catalog/services/{id}',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get the API document of the orderable service.<br> Required role: <b>admin</b> or <b>isv</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.id
 * @returns Link OK
 * @throws ApiError
 */
export const openApi = (data: OpenApiData): CancelablePromise<OpenApiResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/catalog/services/{id}/openapi',
        path: {
            id: data.id,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get pending configuration change request for agents to poll.
 * @param data The data for the request.
 * @param data.serviceId The id of the deployed service
 * @param data.resourceName The name of the resource of deployed service
 * @returns ServiceConfigurationChangeRequest pending configuration update request details
 * @returns void no pending configuration update requests
 * @throws ApiError
 */
export const getPendingConfigurationChangeRequest = (
    data: GetPendingConfigurationChangeRequestData
): CancelablePromise<GetPendingConfigurationChangeRequestResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/xpanse/agent/poll/{serviceId}/{resourceName}',
        path: {
            serviceId: data.serviceId,
            resourceName: data.resourceName,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get token info by authorization code.
 * @param data The data for the request.
 * @param data.code The authorization code.
 * @param data.state Opaque value used to maintain state.
 * @returns TokenResponse OK
 * @throws ApiError
 */
export const getAccessToken = (data: GetAccessTokenData): CancelablePromise<GetAccessTokenResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/auth/token',
        query: {
            code: data.code,
            state: data.state,
        },
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Get and redirect authorization url for user to authenticate.
 * @returns unknown OK
 * @throws ApiError
 */
export const authorize = (): CancelablePromise<AuthorizeResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/auth/authorize',
        errors: {
            400: 'Bad Request',
            401: 'Unauthorized',
            403: 'Forbidden',
            408: 'Request Timeout',
            422: 'Unprocessable Entity',
            500: 'Internal Server Error',
            502: 'Bad Gateway',
        },
    });
};

/**
 * Create an order task to destroy the deployed service using id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const destroy = (data: DestroyData): CancelablePromise<DestroyResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/services/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: '',
            401: '',
            403: '',
            408: '',
            422: '',
            500: '',
            502: '',
        },
    });
};

/**
 * Create an order task to purge the deployed service using service id.<br> Required role: <b>admin</b> or <b>user</b> </br>
 * @param data The data for the request.
 * @param data.serviceId Id of the service
 * @returns ServiceOrder Accepted
 * @throws ApiError
 */
export const purge = (data: PurgeData): CancelablePromise<PurgeResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/xpanse/services/purge/{serviceId}',
        path: {
            serviceId: data.serviceId,
        },
        errors: {
            400: '',
            401: '',
            403: '',
            408: '',
            422: '',
            500: '',
            502: '',
        },
    });
};
