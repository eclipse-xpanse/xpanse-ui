/*
 * SPDX-License-Identifier: Apache-2.0
 * SPDX-FileCopyrightText: Huawei Inc.
 */

// This file is auto-generated by @hey-api/openapi-ts

export type Response = {
    /**
     * The result code of response.
     */
    resultType:
        | 'Success'
        | 'Runtime Error'
        | 'Parameters Invalid'
        | 'Terraform Script Invalid'
        | 'Unprocessable Entity'
        | 'Response Not Valid'
        | 'Failure while connecting to backend'
        | 'Credential Capability Not Found'
        | 'Credentials Not Found'
        | 'Credential Variables Not Complete'
        | 'Flavor Invalid'
        | 'Terraform Execution Failed'
        | 'Plugin Not Found'
        | 'Deployer Not Found'
        | 'No Credential Definition Available'
        | 'Invalid Service State'
        | 'Resource Invalid For Monitoring'
        | 'Unhandled Exception'
        | 'Service Template Already Registered'
        | 'Icon Processing Failed'
        | 'Service Template Not Registered'
        | 'Service Template Not Approved'
        | 'Service Template Already Reviewed'
        | 'Invalid Service Version'
        | 'Invalid Service Flavors'
        | 'Service Deployment Not Found'
        | 'Resource Not Found'
        | 'Deployment Variable Invalid'
        | 'Deployment Failed'
        | 'Service Template Update Not Allowed'
        | 'Service Template Still In Use'
        | 'Unauthorized'
        | 'Access Denied'
        | 'Sensitive Field Encryption Or Decryption Failed Exception'
        | 'Unsupported Enum Value'
        | 'Terraform Boot Request Failed'
        | 'Tofu Maker Request Failed'
        | 'Metrics Data Not Ready'
        | 'Variable Validation Failed'
        | 'Variable Schema Definition Invalid'
        | 'Policy Not Found'
        | 'Duplicate Policy'
        | 'Policy Validation Failed'
        | 'Policy Evaluation Failed'
        | 'Current Login User No Found'
        | 'Service Details No Accessible'
        | 'Migrating activiti Task Not Found'
        | 'Service Migration Failed Exception'
        | 'Service Migration Not Found'
        | 'Service Locked'
        | 'Eula Not Accepted'
        | 'Service Flavor Downgrade Not Allowed'
        | 'Billing Mode Not Supported'
        | 'Service State Management Task Not Found'
        | 'Service Order Not Found'
        | 'Service Price Calculation Failed'
        | 'Invalid Git Repo Details'
        | 'File Locked';
    /**
     * Details of the errors occurred
     */
    details: Array<string>;
    /**
     * Describes if the request is successful
     */
    success: boolean;
};

/**
 * The result code of response.
 */
export enum resultType {
    SUCCESS = 'Success',
    RUNTIME_ERROR = 'Runtime Error',
    PARAMETERS_INVALID = 'Parameters Invalid',
    TERRAFORM_SCRIPT_INVALID = 'Terraform Script Invalid',
    UNPROCESSABLE_ENTITY = 'Unprocessable Entity',
    RESPONSE_NOT_VALID = 'Response Not Valid',
    FAILURE_WHILE_CONNECTING_TO_BACKEND = 'Failure while connecting to backend',
    CREDENTIAL_CAPABILITY_NOT_FOUND = 'Credential Capability Not Found',
    CREDENTIALS_NOT_FOUND = 'Credentials Not Found',
    CREDENTIAL_VARIABLES_NOT_COMPLETE = 'Credential Variables Not Complete',
    FLAVOR_INVALID = 'Flavor Invalid',
    TERRAFORM_EXECUTION_FAILED = 'Terraform Execution Failed',
    PLUGIN_NOT_FOUND = 'Plugin Not Found',
    DEPLOYER_NOT_FOUND = 'Deployer Not Found',
    NO_CREDENTIAL_DEFINITION_AVAILABLE = 'No Credential Definition Available',
    INVALID_SERVICE_STATE = 'Invalid Service State',
    RESOURCE_INVALID_FOR_MONITORING = 'Resource Invalid For Monitoring',
    UNHANDLED_EXCEPTION = 'Unhandled Exception',
    SERVICE_TEMPLATE_ALREADY_REGISTERED = 'Service Template Already Registered',
    ICON_PROCESSING_FAILED = 'Icon Processing Failed',
    SERVICE_TEMPLATE_NOT_REGISTERED = 'Service Template Not Registered',
    SERVICE_TEMPLATE_NOT_APPROVED = 'Service Template Not Approved',
    SERVICE_TEMPLATE_ALREADY_REVIEWED = 'Service Template Already Reviewed',
    INVALID_SERVICE_VERSION = 'Invalid Service Version',
    INVALID_SERVICE_FLAVORS = 'Invalid Service Flavors',
    SERVICE_DEPLOYMENT_NOT_FOUND = 'Service Deployment Not Found',
    RESOURCE_NOT_FOUND = 'Resource Not Found',
    DEPLOYMENT_VARIABLE_INVALID = 'Deployment Variable Invalid',
    DEPLOYMENT_FAILED = 'Deployment Failed',
    SERVICE_TEMPLATE_UPDATE_NOT_ALLOWED = 'Service Template Update Not Allowed',
    SERVICE_TEMPLATE_STILL_IN_USE = 'Service Template Still In Use',
    UNAUTHORIZED = 'Unauthorized',
    ACCESS_DENIED = 'Access Denied',
    SENSITIVE_FIELD_ENCRYPTION_OR_DECRYPTION_FAILED_EXCEPTION = 'Sensitive Field Encryption Or Decryption Failed Exception',
    UNSUPPORTED_ENUM_VALUE = 'Unsupported Enum Value',
    TERRAFORM_BOOT_REQUEST_FAILED = 'Terraform Boot Request Failed',
    TOFU_MAKER_REQUEST_FAILED = 'Tofu Maker Request Failed',
    METRICS_DATA_NOT_READY = 'Metrics Data Not Ready',
    VARIABLE_VALIDATION_FAILED = 'Variable Validation Failed',
    VARIABLE_SCHEMA_DEFINITION_INVALID = 'Variable Schema Definition Invalid',
    POLICY_NOT_FOUND = 'Policy Not Found',
    DUPLICATE_POLICY = 'Duplicate Policy',
    POLICY_VALIDATION_FAILED = 'Policy Validation Failed',
    POLICY_EVALUATION_FAILED = 'Policy Evaluation Failed',
    CURRENT_LOGIN_USER_NO_FOUND = 'Current Login User No Found',
    SERVICE_DETAILS_NO_ACCESSIBLE = 'Service Details No Accessible',
    MIGRATING_ACTIVITI_TASK_NOT_FOUND = 'Migrating activiti Task Not Found',
    SERVICE_MIGRATION_FAILED_EXCEPTION = 'Service Migration Failed Exception',
    SERVICE_MIGRATION_NOT_FOUND = 'Service Migration Not Found',
    SERVICE_LOCKED = 'Service Locked',
    EULA_NOT_ACCEPTED = 'Eula Not Accepted',
    SERVICE_FLAVOR_DOWNGRADE_NOT_ALLOWED = 'Service Flavor Downgrade Not Allowed',
    BILLING_MODE_NOT_SUPPORTED = 'Billing Mode Not Supported',
    SERVICE_STATE_MANAGEMENT_TASK_NOT_FOUND = 'Service State Management Task Not Found',
    SERVICE_ORDER_NOT_FOUND = 'Service Order Not Found',
    SERVICE_PRICE_CALCULATION_FAILED = 'Service Price Calculation Failed',
    INVALID_GIT_REPO_DETAILS = 'Invalid Git Repo Details',
    FILE_LOCKED = 'File Locked',
}

export type CreateCredential = {
    /**
     * The name of the credential
     */
    name: string;
    /**
     * The cloud service provider of the credential.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The description of the credential
     */
    description?: string;
    /**
     * The type of the credential
     */
    type: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
    /**
     * The variables list of the credential. The list elements must be unique.
     */
    variables: Array<CredentialVariable>;
    /**
     * The time in seconds to live of the credential
     */
    timeToLive: number;
};

/**
 * The cloud service provider of the credential.
 */
export enum csp {
    HUAWEI_CLOUD = 'HuaweiCloud',
    FLEXIBLE_ENGINE = 'FlexibleEngine',
    OPENSTACK_TESTLAB = 'OpenstackTestlab',
    PLUS_SERVER = 'PlusServer',
    REGIO_CLOUD = 'RegioCloud',
    ALIBABA_CLOUD = 'AlibabaCloud',
    AWS = 'aws',
    AZURE = 'azure',
    GOOGLE_CLOUD_PLATFORM = 'GoogleCloudPlatform',
}

/**
 * The type of the credential
 */
export enum type {
    VARIABLES = 'variables',
    HTTP_AUTHENTICATION = 'http_authentication',
    API_KEY = 'api_key',
    OAUTH2 = 'oauth2',
}

/**
 * The variables list of the credential. The list elements must be unique.
 */
export type CredentialVariable = {
    /**
     * The name of the CredentialVariable,this field is provided by the plugin of cloud service provider.
     */
    name: string;
    /**
     * The description of the CredentialVariable,this field is provided by the plugin of cloud service provider.
     */
    description: string;
    /**
     * If the variable is mandatory. If is optional then the credential completeness check will ignore this variable. It is upto the plugin to decide what needs to be done if this optional credential variable is present.
     */
    isMandatory?: boolean;
    /**
     * Defines if the particular variable contains sensitive data. For example the value is false for username and true for password variables respectively.
     */
    isSensitive: boolean;
    /**
     * The value of the CredentialVariable, this field is filled by the user.
     */
    value: string;
};

export type ModifyRequest = {
    /**
     * Customer's name for the service. Used only for customer's reference. If not provided, the existing customerServiceName from the service will be reused.
     */
    customerServiceName?: string;
    /**
     * The flavor of the Service.
     */
    flavor?: string;
    /**
     * The properties for the requested service
     */
    serviceRequestProperties?: {
        [key: string]: unknown;
    };
};

export type ServiceOrder = {
    /**
     * The id of the service order.
     */
    orderId: string;
    /**
     * The id of the deployed service.
     */
    serviceId: string;
};

export type ServiceLockConfig = {
    modifyLocked?: boolean;
    destroyLocked?: boolean;
};

/**
 * Service config parameter autofill
 */
export type AutoFill = {
    /**
     * Type of the cloud resource to be reused.
     */
    deployResourceKind:
        | 'vm'
        | 'container'
        | 'publicIP'
        | 'vpc'
        | 'volume'
        | 'unknown'
        | 'security_group'
        | 'security_group_rule'
        | 'keypair'
        | 'subnet';
    /**
     *  defines if the required cloud resource can be newly created or should the existing resources must only be used.
     */
    isAllowCreate: boolean;
};

/**
 * Type of the cloud resource to be reused.
 */
export enum deployResourceKind {
    VM = 'vm',
    CONTAINER = 'container',
    PUBLIC_IP = 'publicIP',
    VPC = 'vpc',
    VOLUME = 'volume',
    UNKNOWN = 'unknown',
    SECURITY_GROUP = 'security_group',
    SECURITY_GROUP_RULE = 'security_group_rule',
    KEYPAIR = 'keypair',
    SUBNET = 'subnet',
}

/**
 * The list of availability zone configuration of the service.The list elements must be unique.
 */
export type AvailabilityZoneConfig = {
    /**
     * The display name of availability zone.
     */
    displayName: string;
    /**
     * The variable name of availability zone.
     */
    varName: string;
    /**
     * Indicates if the variable is mandatory.
     */
    mandatory: boolean;
    /**
     * The description of availability zone.
     */
    description?: string;
};

/**
 * The billing policy of the managed service
 */
export type Billing = {
    /**
     * Supported billing modes by the managed service. The list elements must be unique.
     */
    billingModes: Array<'Fixed' | 'Pay per Use'>;
    /**
     *  This is used only for display purposes. When provided, this billingMode will be selected in the frontends by default.
     */
    defaultBillingMode?: 'Fixed' | 'Pay per Use';
};

/**
 *  This is used only for display purposes. When provided, this billingMode will be selected in the frontends by default.
 */
export enum defaultBillingMode {
    FIXED = 'Fixed',
    PAY_PER_USE = 'Pay per Use',
}

/**
 * The cloud service provider of the managed service
 */
export type CloudServiceProvider = {
    /**
     * The Cloud Service Provider.
     */
    name:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The regions of the Cloud Service Provider. The list elements must be unique.
     */
    regions: Array<Region>;
};

/**
 * The Cloud Service Provider.
 */
export enum name {
    HUAWEI_CLOUD = 'HuaweiCloud',
    FLEXIBLE_ENGINE = 'FlexibleEngine',
    OPENSTACK_TESTLAB = 'OpenstackTestlab',
    PLUS_SERVER = 'PlusServer',
    REGIO_CLOUD = 'RegioCloud',
    ALIBABA_CLOUD = 'AlibabaCloud',
    AWS = 'aws',
    AZURE = 'azure',
    GOOGLE_CLOUD_PLATFORM = 'GoogleCloudPlatform',
}

/**
 * The variables for the deployment, which will be passed to the deployer.The list elements must be unique.
 */
export type DeployVariable = {
    /**
     * The name of the deploy variable
     */
    name: string;
    kind: DeployVariableKind;
    /**
     * The type of the deploy variable
     */
    dataType: 'string' | 'number' | 'boolean';
    /**
     * The example value of the deploy variable
     */
    example?: string;
    /**
     * The description of the deploy variable
     */
    description: string;
    /**
     * The value of the deploy variable. Value can be provided for default variables
     */
    value?: string;
    /**
     * Indicates if the variable is mandatory
     */
    mandatory: boolean;
    /**
     * valueSchema of the variable. The key be any keyword that is part of the JSON schema definition which can be found here https://json-schema.org/draft/2020-12/schema
     */
    valueSchema?: {
        [key: string]: unknown;
    };
    /**
     * Sensitive scope of variable storage
     */
    sensitiveScope?: 'none' | 'once' | 'always';
    autoFill?: AutoFill;
    modificationImpact: ModificationImpact;
};

/**
 * The type of the deploy variable
 */
export enum dataType {
    STRING = 'string',
    NUMBER = 'number',
    BOOLEAN = 'boolean',
}

/**
 * Sensitive scope of variable storage
 */
export enum sensitiveScope {
    NONE = 'none',
    ONCE = 'once',
    ALWAYS = 'always',
}

/**
 * - `fix_env`: Values for variable of this type are defined by the managed service provider
 * in the OCL template. Runtime will inject it to deployer as environment variables.
 * This variable is not visible to the end user.
 * - `fix_variable`: Values for variable of this type are defined by the managed service
 * provider in the OCL template. Runtime will inject it to deployer as usual variables.
 * This variable is not visible to the end user.
 * - `env`: Value for a variable of this type can be provided by end user.
 * If marked as mandatory then end user must provide value to this variable.
 * If marked as optional and if end user does not provide it,
 * then the fallback value to this variable is read by runtime (it can read from other sources,
 * e.g., OS env variables). This variable is injected as an environment
 * variable to the deployer.
 * - `variable`: Value for a variable of this type can be provided by end user.
 * If marked as mandatory then end user must provide value to this variable.
 * If marked as optional and if end user does not provide it,
 * then the fallback value to this variable is read by runtime (it can read from other sources,
 * e.g., OS env variables). This variable is injected as a regular variable to the deployer.
 * - `env_env`: Value to this variable is read by runtime
 * (it can read from other sources, e.g., OS env variables)
 * and injected as an environment variable to the deployer.
 * End user cannot see or change this variable.
 * - `env_variable`: Value to this variable is read by runtime
 * (it can read from other sources, e.g., OS env variables)
 * and injected as a regular variable to the deployer.
 * End user cannot see or change this variable.
 */
export enum DeployVariableKind {
    FIX_ENV = 'fix_env',
    FIX_VARIABLE = 'fix_variable',
    ENV = 'env',
    VARIABLE = 'variable',
    ENV_ENV = 'env_env',
    ENV_VARIABLE = 'env_variable',
}

/**
 * The deployment of the managed service
 */
export type Deployment = {
    /**
     * The type of the Deployer which will handle the service deployment
     */
    kind: 'terraform' | 'opentofu';
    /**
     * The variables for the deployment, which will be passed to the deployer.The list elements must be unique.
     */
    variables: Array<DeployVariable>;
    /**
     * The credential type to do the deployment
     */
    credentialType?: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
    /**
     * The list of availability zone configuration of the service.The list elements must be unique.
     */
    serviceAvailabilityConfigs?: Array<AvailabilityZoneConfig>;
    /**
     * The real deployer, something like terraform scripts. Either deployer or deployFromGitRepo must be provided.
     */
    deployer?: string;
    scriptsRepo?: ScriptsRepo;
};

/**
 * The type of the Deployer which will handle the service deployment
 */
export enum kind {
    TERRAFORM = 'terraform',
    OPENTOFU = 'opentofu',
}

/**
 * The credential type to do the deployment
 */
export enum credentialType {
    VARIABLES = 'variables',
    HTTP_AUTHENTICATION = 'http_authentication',
    API_KEY = 'api_key',
    OAUTH2 = 'oauth2',
}

/**
 * The flavors of the managed service
 */
export type FlavorsWithPrice = {
    /**
     * The flavors of the managed service. The list elements must be unique.
     */
    serviceFlavors: Array<ServiceFlavorWithPrice>;
    modificationImpact: ModificationImpact;
    /**
     * Whether the downgrading is allowed, default value: true.
     */
    isDowngradeAllowed: boolean;
    downgradeAllowed?: boolean;
};

/**
 * Service config parameter modificationImpact
 */
export type ModificationImpact = {
    /**
     * Is data lost when service configuration is modified.
     */
    isDataLost?: boolean;
    /**
     * Is service availability interrupted when the configuration is interrupted.
     */
    isServiceInterrupted?: boolean;
};

export type Ocl = {
    /**
     * The catalog of the service
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The version of the Ocl
     */
    version: string;
    /**
     * The name of the managed service
     */
    name: string;
    /**
     * The version of the managed service
     */
    serviceVersion: string;
    /**
     * The description of the managed service
     */
    description: string;
    /**
     * The namespace of the managed service
     */
    namespace: string;
    /**
     * The icon of the managed service
     */
    icon: string;
    cloudServiceProvider: CloudServiceProvider;
    deployment: Deployment;
    flavors: FlavorsWithPrice;
    billing: Billing;
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    serviceProviderContactDetails: ServiceProviderContactDetails;
    /**
     * End user license agreement content of the service.
     */
    eula?: string;
    /**
     * The collection of service configuration parameters.
     */
    configurationParameters?: Array<ServiceConfigurationParameter>;
};

/**
 * The catalog of the service
 */
export enum category {
    AI = 'ai',
    COMPUTE = 'compute',
    CONTAINER = 'container',
    STORAGE = 'storage',
    NETWORK = 'network',
    DATABASE = 'database',
    MEDIA_SERVICE = 'mediaService',
    SECURITY = 'security',
    MIDDLEWARE = 'middleware',
    OTHERS = 'others',
}

/**
 * Defines which cloud service account is used for deploying cloud resources.
 */
export enum serviceHostingType {
    SELF = 'self',
    SERVICE_VENDOR = 'service-vendor',
}

/**
 * The listed price of the flavor of the manged service.
 */
export type Price = {
    /**
     * The value of the cost.
     */
    cost: number;
    /**
     * The currency of the cost.
     */
    currency: 'USD' | 'EUR' | 'CNY';
    /**
     * The period of the cost.
     */
    period?: 'yearly' | 'monthly' | 'daily' | 'hourly' | 'oneTime';
};

/**
 * The currency of the cost.
 */
export enum currency {
    USD = 'USD',
    EUR = 'EUR',
    CNY = 'CNY',
}

/**
 * The period of the cost.
 */
export enum period {
    YEARLY = 'yearly',
    MONTHLY = 'monthly',
    DAILY = 'daily',
    HOURLY = 'hourly',
    ONE_TIME = 'oneTime',
}

/**
 * The pricing of the flavor
 */
export type RatingMode = {
    fixedPrice?: Price;
    resourceUsage?: ResourceUsage;
    /**
     * Whether the price is only for management layer. Consumption of the workload resources will be billed additionally..
     */
    isPriceOnlyForManagementLayer: boolean;
};

/**
 * The regions of the Cloud Service Provider. The list elements must be unique.
 */
export type Region = {
    /**
     * The name of the Region
     */
    name: string;
    /**
     * The area which the region belongs to, such as Asia, Europe, Africa
     */
    area: string;
};

/**
 * The resources of the flavor of the manged service.
 */
export type Resource = {
    /**
     * The count of the same resource.
     */
    count: number;
    /**
     * The kind of the same resource.
     */
    deployResourceKind:
        | 'vm'
        | 'container'
        | 'publicIP'
        | 'vpc'
        | 'volume'
        | 'unknown'
        | 'security_group'
        | 'security_group_rule'
        | 'keypair'
        | 'subnet';
    /**
     * The properties of the same resource.
     */
    properties?: {
        [key: string]: string;
    };
};

/**
 * The resource usage of the flavor in the managed service.
 */
export type ResourceUsage = {
    /**
     * The resources of the flavor of the manged service.
     */
    resources: Array<Resource>;
    licensePrice?: Price;
    markUpPrice?: Price;
};

/**
 * Deployment scripts hosted on a GIT repo. Either deployer or deployFromGitRepo must be provided.
 */
export type ScriptsRepo = {
    /**
     * URL of the repo
     */
    repoUrl: string;
    /**
     * Branch to be checked out. Can be branch or a Tag
     */
    branch: string;
    /**
     * Directory in the repo where scripts are present. If not provided, the root directory of the repo is considered
     */
    scriptsPath?: string;
};

/**
 * The collection of service configuration parameters.
 */
export type ServiceConfigurationParameter = {
    /**
     * The name of the service config parameter
     */
    name: string;
    kind: DeployVariableKind;
    /**
     * The type of the service config parameter
     */
    dataType: 'string' | 'number' | 'boolean';
    /**
     * The example value of the service config parameter
     */
    example?: string;
    /**
     * The description of the service config parameter
     */
    description: string;
    /**
     * The value of the service config parameter. Value can be provided for initial value
     */
    value?: string;
    /**
     * The init value of the service config parameter
     */
    initialValue: string;
    /**
     * Indicates if the service config parameter is mandatory
     */
    mandatory: boolean;
    /**
     * valueSchema of the service config parameter. The key be any keyword that is part of the JSON schema definition which can be found here https://json-schema.org/draft/2020-12/schema
     */
    valueSchema?: {
        [key: string]: unknown;
    };
    /**
     * Sensitive scope of service config parameter storage
     */
    sensitiveScope?: 'none' | 'once' | 'always';
    autoFill?: AutoFill;
    modificationImpact: ModificationImpact;
    /**
     * Whether the service configuration parameters are read-only
     */
    isReadOnly: boolean;
};

/**
 * The flavors of the managed service. The list elements must be unique.
 */
export type ServiceFlavorWithPrice = {
    /**
     * The flavor name
     */
    name: string;
    /**
     * The properties of the flavor
     */
    properties: {
        [key: string]: string;
    };
    /**
     * The priority of the flavor. The larger value means lower priority.
     */
    priority: number;
    /**
     * Important features and differentiators of the flavor.
     */
    features?: Array<string>;
    pricing: RatingMode;
};

/**
 * The contact details of the service provider.
 */
export type ServiceProviderContactDetails = {
    /**
     * List of the email details of the service provider. The list elements must be unique.
     */
    emails?: Array<string>;
    /**
     * List of the phone details of the service provider. The list elements must be unique.
     */
    phones?: Array<string>;
    /**
     * List of the chat details of the service provider. The list elements must be unique.
     */
    chats?: Array<string>;
    /**
     * List of the website details of the service provider. The list elements must be unique.
     */
    websites?: Array<string>;
};

export type Link = {
    rel?: string;
    href?: string;
    hreflang?: string;
    media?: string;
    title?: string;
    type?: string;
    deprecation?: string;
    profile?: string;
    name?: string;
};

export type ServiceTemplateDetailVo = {
    /**
     * ID of the registered service.
     */
    serviceTemplateId: string;
    /**
     * Name of the registered service.
     */
    name: string;
    /**
     * Version of the registered service.
     */
    version: string;
    /**
     * Csp of the registered service.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * Category of the registered service.
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * Namespace of the user who registered service template.
     */
    namespace: string;
    /**
     * The regions of the Cloud Service Provider.
     */
    regions: Array<Region>;
    /**
     * The description of the registered service.
     */
    description: string;
    /**
     * The icon of the registered service.
     */
    icon: string;
    deployment: Deployment;
    /**
     * The variables for the deployment, which will be passed to the deployer.
     */
    variables: Array<DeployVariable>;
    flavors: FlavorsWithPrice;
    billing: Billing;
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    /**
     * createTime of the registered service.
     */
    createTime: string;
    /**
     * Last updateTime of the registered service.
     */
    lastModifiedTime: string;
    /**
     * State of registered service template.
     */
    serviceRegistrationState: 'unregistered' | 'approval pending' | 'approved' | 'rejected';
    /**
     * Comment of reviewed service template.
     */
    reviewComment?: string;
    serviceProviderContactDetails: ServiceProviderContactDetails;
    /**
     * End user license agreement content of the service.
     */
    eula?: string;
    links?: Array<Link>;
};

/**
 * State of registered service template.
 */
export enum serviceRegistrationState {
    UNREGISTERED = 'unregistered',
    APPROVAL_PENDING = 'approval pending',
    APPROVED = 'approved',
    REJECTED = 'rejected',
}

export type ReviewRegistrationRequest = {
    /**
     * The result of review registration.
     */
    reviewResult: 'approved' | 'rejected';
    /**
     * The comment of review registration.
     */
    reviewComment?: string;
};

/**
 * The result of review registration.
 */
export enum reviewResult {
    APPROVED = 'approved',
    REJECTED = 'rejected',
}

export type ServicePolicyUpdateRequest = {
    /**
     * The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.
     */
    flavorNameList?: Array<string>;
    /**
     * The policy.
     */
    policy?: string;
    /**
     * Is the policy enabled. true:enabled;false:disabled.
     */
    enabled?: boolean;
};

export type ServicePolicy = {
    /**
     * The id of the policy.
     */
    servicePolicyId: string;
    /**
     * The valid policy belongs to the service.
     */
    policy: string;
    /**
     * The id of registered service template which the policy belongs to.
     */
    serviceTemplateId: string;
    /**
     * The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.
     */
    flavorNameList?: Array<string>;
    /**
     * Is the policy enabled.
     */
    enabled: boolean;
    /**
     * Time of the policy created.
     */
    createTime: string;
    /**
     * Time of the policy updated.
     */
    lastModifiedTime: string;
};

export type UserPolicyUpdateRequest = {
    /**
     * The csp which the policy belongs to.
     */
    csp?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The policy.
     */
    policy?: string;
    /**
     * Is the policy enabled. true:enabled;false:disabled.
     */
    enabled?: boolean;
};

export type UserPolicy = {
    /**
     * The id of the policy.
     */
    userPolicyId: string;
    /**
     * The valid policy created by the user.
     */
    policy: string;
    /**
     * The csp which the policy belongs to.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * Is the policy enabled.
     */
    enabled: boolean;
    /**
     * Time of the policy created.
     */
    createTime: string;
    /**
     * Time of the policy updated.
     */
    lastModifiedTime: string;
};

export type DeployRequest = {
    /**
     * The category of the service
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The name of the service ordered.
     */
    serviceName: string;
    /**
     * Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated
     */
    customerServiceName?: string;
    /**
     * The version of service
     */
    version: string;
    region: Region;
    /**
     * The csp of the Service.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The flavor of the Service.
     */
    flavor: string;
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    /**
     * The properties for the requested service
     */
    serviceRequestProperties?: {
        [key: string]: unknown;
    };
    /**
     * The availability zones to deploy the service instance.
     */
    availabilityZones?: {
        [key: string]: string;
    };
    /**
     * The billing mode of the managed service.
     */
    billingMode: 'Fixed' | 'Pay per Use';
    eulaAccepted?: boolean;
};

/**
 * The billing mode of the managed service.
 */
export enum billingMode {
    FIXED = 'Fixed',
    PAY_PER_USE = 'Pay per Use',
}

export type MigrateRequest = {
    /**
     * The category of the service
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The name of the service ordered.
     */
    serviceName: string;
    /**
     * Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated
     */
    customerServiceName?: string;
    /**
     * The version of service
     */
    version: string;
    region: Region;
    /**
     * The csp of the Service.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The flavor of the Service.
     */
    flavor: string;
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    /**
     * The properties for the requested service
     */
    serviceRequestProperties?: {
        [key: string]: unknown;
    };
    /**
     * The availability zones to deploy the service instance.
     */
    availabilityZones?: {
        [key: string]: string;
    };
    /**
     * The billing mode of the managed service.
     */
    billingMode: 'Fixed' | 'Pay per Use';
    /**
     * The id of the service to migrate
     */
    originalServiceId: string;
    eulaAccepted?: boolean;
};

export type ServicePolicyCreateRequest = {
    /**
     * The id of registered service template which the policy belongs to.
     */
    serviceTemplateId: string;
    /**
     * The flavor name list which the policy belongs to. If the list is empty, then the policy will be executed for during service deployment of all flavors.
     */
    flavorNameList?: Array<string>;
    /**
     * The policy.
     */
    policy: string;
    /**
     * Is the policy enabled. true:enabled;false:disabled.
     */
    enabled: boolean;
};

export type UserPolicyCreateRequest = {
    /**
     * The csp which the policy belongs to.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The policy.
     */
    policy: string;
    /**
     * Is the policy enabled. true:enabled;false:disabled.
     */
    enabled: boolean;
};

export type OpenTofuResult = {
    requestId?: string;
    commandStdOutput?: string;
    commandStdError?: string;
    terraformState?: string;
    importantFileContentMap?: {
        [key: string]: string;
    };
    commandSuccessful?: boolean;
};

export type TerraformResult = {
    requestId?: string;
    commandStdOutput?: string;
    commandStdError?: string;
    terraformState?: string;
    importantFileContentMap?: {
        [key: string]: string;
    };
    commandSuccessful?: boolean;
};

export type WorkFlowTask = {
    /**
     * The id of the ProcessInstance
     */
    processInstanceId: string;
    /**
     * The name of the ProcessInstance
     */
    processInstanceName?: string;
    /**
     * The id of the ProcessDefinition
     */
    processDefinitionId: string;
    /**
     * The name of the ProcessDefinition
     */
    processDefinitionName: string;
    /**
     * The execution id of the ProcessInstance
     */
    executionId: string;
    /**
     * The id of the task
     */
    taskId: string;
    /**
     * The name of the task
     */
    taskName: string;
    /**
     * The businessKey of the Process
     */
    businessKey: string;
    /**
     * The status of the Task
     */
    status: 'done' | 'failed';
    /**
     * The create time of the task
     */
    createTime: string;
};

/**
 * The status of the Task
 */
export enum status {
    DONE = 'done',
    FAILED = 'failed',
}

export type AbstractCredentialInfo = CredentialVariables & {
    /**
     * The cloud service provider of the credential.
     */
    csp?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The type of the credential, this field is provided by the plugin of cloud service provider.
     */
    type?: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
    /**
     * The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type.
     */
    name?: string;
    /**
     * The description of the credential,this field is provided by the plugin of cloud service provider.
     */
    description?: string;
    /**
     * The id of user who created the credential.
     */
    userId?: string;
} & {
    /**
     * The cloud service provider of the credential.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The type of the credential, this field is provided by the plugin of cloud service provider.
     */
    type: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
    /**
     * The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type.
     */
    name: string;
    /**
     * The description of the credential,this field is provided by the plugin of cloud service provider.
     */
    description: string;
};

export type CredentialVariables = {
    /**
     * The cloud service provider of the credential.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The type of the credential, this field is provided by the plugin of cloud service provider.
     */
    type: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
    /**
     * The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type.
     */
    name: string;
    /**
     * The description of the credential,this field is provided by the plugin of cloud service provider.
     */
    description: string;
    /**
     * The id of user who created the credential.
     */
    userId?: string;
    /**
     * The variables list of the credential.
     */
    variables: Array<CredentialVariable>;
};

/**
 * The deployed resources of the service before this service order.
 */
export type DeployResource = {
    /**
     * The type of the group which configuration the deployed resource.
     */
    groupType: string;
    /**
     * The name of the group which configuration the deployed resource.
     */
    groupName: string;
    /**
     * The id of the deployed resource.
     */
    resourceId: string;
    /**
     * The name of the deployed resource.
     */
    resourceName: string;
    /**
     * The kind of the deployed resource.
     */
    resourceKind:
        | 'vm'
        | 'container'
        | 'publicIP'
        | 'vpc'
        | 'volume'
        | 'unknown'
        | 'security_group'
        | 'security_group_rule'
        | 'keypair'
        | 'subnet';
    /**
     * The properties of the deployed resource.
     */
    properties: {
        [key: string]: string;
    };
};

/**
 * The kind of the deployed resource.
 */
export enum resourceKind {
    VM = 'vm',
    CONTAINER = 'container',
    PUBLIC_IP = 'publicIP',
    VPC = 'vpc',
    VOLUME = 'volume',
    UNKNOWN = 'unknown',
    SECURITY_GROUP = 'security_group',
    SECURITY_GROUP_RULE = 'security_group_rule',
    KEYPAIR = 'keypair',
    SUBNET = 'subnet',
}

export type DeployedService = {
    /**
     * The ID of the service
     */
    serviceId: string;
    /**
     * The catalog of the service
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The name of the service
     */
    name: string;
    /**
     * Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated
     */
    customerServiceName?: string;
    /**
     * The version of the service
     */
    version: string;
    /**
     * The provider of the service
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The flavor of the service
     */
    flavor?: string;
    /**
     * The id of the Service Template
     */
    serviceTemplateId?: string;
    /**
     * The id of the user who deployed the service.
     */
    userId?: string;
    /**
     * The deployment state of the service
     */
    serviceDeploymentState:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * The run state of the service
     */
    serviceState: 'not running' | 'running' | 'starting' | 'stopping' | 'stopped' | 'restarting';
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    /**
     * Time of register service.
     */
    createTime: string;
    /**
     * Time of update service.
     */
    lastModifiedTime: string;
    /**
     * Time of start service.
     */
    lastStartedAt?: string;
    /**
     * Time of stop service.
     */
    lastStoppedAt?: string;
    lockConfig?: ServiceLockConfig;
    latestRunningManagementTask?: ServiceStateManagementTaskDetails;
    latestModificationAudit?: ServiceOrderDetails;
};

/**
 * The deployment state of the service
 */
export enum serviceDeploymentState {
    DEPLOYING = 'deploying',
    DEPLOYMENT_SUCCESSFUL = 'deployment successful',
    DEPLOYMENT_FAILED = 'deployment failed',
    DESTROYING = 'destroying',
    DESTROY_SUCCESSFUL = 'destroy successful',
    DESTROY_FAILED = 'destroy failed',
    MANUAL_CLEANUP_REQUIRED = 'manual cleanup required',
    ROLLBACK_FAILED = 'rollback failed',
    MODIFYING = 'modifying',
    MODIFICATION_FAILED = 'modification failed',
    MODIFICATION_SUCCESSFUL = 'modification successful',
}

/**
 * The run state of the service
 */
export enum serviceState {
    NOT_RUNNING = 'not running',
    RUNNING = 'running',
    STARTING = 'starting',
    STOPPING = 'stopping',
    STOPPED = 'stopped',
    RESTARTING = 'restarting',
}

/**
 * The latest service management audit details.
 */
export type ServiceOrderDetails = {
    /**
     * The id of the service order.
     */
    orderId: string;
    /**
     * The id of the deployed service.
     */
    serviceId: string;
    /**
     * The task type of the service order.
     */
    taskType: 'deploy' | 'redeploy' | 'modify' | 'destroy' | 'purge';
    /**
     * The task status of the service order.
     */
    taskStatus: 'created' | 'in progress' | 'successful' | 'failed';
    /**
     * The error message if the service order task failed.
     */
    errorMsg?: string;
    /**
     * The id of the user who created the service order.
     */
    userId?: string;
    /**
     * The started time of the service order.
     */
    startedTime?: string;
    /**
     * The completed time of the service order.
     */
    completedTime?: string;
    previousDeployRequest?: DeployRequest;
    newDeployRequest?: DeployRequest;
    /**
     * The deployed resources of the service before this service order.
     */
    previousDeployedResources?: Array<DeployResource>;
    /**
     * The properties of the deployed service before this service order.
     */
    previousDeployedServiceProperties?: {
        [key: string]: string;
    };
    /**
     * The properties of the deployed result before this service order.
     */
    previousDeployedResultProperties?: {
        [key: string]: string;
    };
};

/**
 * The task type of the service order.
 */
export enum taskType {
    DEPLOY = 'deploy',
    REDEPLOY = 'redeploy',
    MODIFY = 'modify',
    DESTROY = 'destroy',
    PURGE = 'purge',
}

/**
 * The task status of the service order.
 */
export enum taskStatus {
    CREATED = 'created',
    IN_PROGRESS = 'in progress',
    SUCCESSFUL = 'successful',
    FAILED = 'failed',
}

/**
 * The latest running service management task details.
 */
export type ServiceStateManagementTaskDetails = {
    /**
     * The id of the service state management task.
     */
    taskId: string;
    /**
     * The id of the deployed service.
     */
    serviceId: string;
    /**
     * The type of the service state management task.
     */
    taskType: 'start' | 'stop' | 'restart';
    /**
     * The status of the service state management task.
     */
    taskStatus: 'created' | 'in progress' | 'successful' | 'failed';
    /**
     * The error message of the failed management task.
     */
    errorMsg?: string;
    /**
     * The started time of the task.
     */
    startedTime?: string;
    /**
     * The completed time of the task.
     */
    completedTime?: string;
};

/**
 * The type of the service state management task.
 */
export enum taskType2 {
    START = 'start',
    STOP = 'stop',
    RESTART = 'restart',
}

export type DeploymentStatusUpdate = {
    /**
     * Current state of the deployment request.
     */
    serviceDeploymentState:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * Describes if the deployment request is now completed
     */
    isOrderCompleted: boolean;
};

export type ServiceOrderStatusUpdate = {
    /**
     * Current task status of the service order.
     */
    taskStatus: 'created' | 'in progress' | 'successful' | 'failed';
    /**
     * Describes if the service order is now completed.
     */
    isOrderCompleted: boolean;
    /**
     * The error message if the service order failed.
     */
    errorMsg?: string;
};

export type ServiceMigrationDetails = {
    /**
     * The ID of the service migration
     */
    migrationId: string;
    /**
     * The ID of the old service
     */
    oldServiceId: string;
    /**
     * The ID of the new service
     */
    newServiceId: string;
    /**
     * The status of the service migration
     */
    migrationStatus:
        | 'MigrationStarted'
        | 'MigrationCompleted'
        | 'MigrationFailed'
        | 'DataExportStarted'
        | 'DataExportFailed'
        | 'DataExportCompleted'
        | 'DeployStarted'
        | 'DeployFailed'
        | 'DeployCompleted'
        | 'DataImportStarted'
        | 'DataImportFailed'
        | 'DataImportCompleted'
        | 'DestroyStarted'
        | 'DestroyFailed'
        | 'DestroyCompleted';
    /**
     * Time of service migration.
     */
    createTime: string;
    /**
     * Time of update service migration.
     */
    lastModifiedTime: string;
};

/**
 * The status of the service migration
 */
export enum migrationStatus {
    MIGRATION_STARTED = 'MigrationStarted',
    MIGRATION_COMPLETED = 'MigrationCompleted',
    MIGRATION_FAILED = 'MigrationFailed',
    DATA_EXPORT_STARTED = 'DataExportStarted',
    DATA_EXPORT_FAILED = 'DataExportFailed',
    DATA_EXPORT_COMPLETED = 'DataExportCompleted',
    DEPLOY_STARTED = 'DeployStarted',
    DEPLOY_FAILED = 'DeployFailed',
    DEPLOY_COMPLETED = 'DeployCompleted',
    DATA_IMPORT_STARTED = 'DataImportStarted',
    DATA_IMPORT_FAILED = 'DataImportFailed',
    DATA_IMPORT_COMPLETED = 'DataImportCompleted',
    DESTROY_STARTED = 'DestroyStarted',
    DESTROY_FAILED = 'DestroyFailed',
    DESTROY_COMPLETED = 'DestroyCompleted',
}

export type DeployedServiceDetails = {
    /**
     * The ID of the service
     */
    serviceId: string;
    /**
     * The catalog of the service
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The name of the service
     */
    name: string;
    /**
     * Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated
     */
    customerServiceName?: string;
    /**
     * The version of the service
     */
    version: string;
    /**
     * The provider of the service
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The flavor of the service
     */
    flavor?: string;
    /**
     * The id of the Service Template
     */
    serviceTemplateId?: string;
    /**
     * The id of the user who deployed the service.
     */
    userId?: string;
    /**
     * The deployment state of the service
     */
    serviceDeploymentState:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * The run state of the service
     */
    serviceState: 'not running' | 'running' | 'starting' | 'stopping' | 'stopped' | 'restarting';
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    /**
     * Time of register service.
     */
    createTime: string;
    /**
     * Time of update service.
     */
    lastModifiedTime: string;
    /**
     * Time of start service.
     */
    lastStartedAt?: string;
    /**
     * Time of stop service.
     */
    lastStoppedAt?: string;
    lockConfig?: ServiceLockConfig;
    latestRunningManagementTask?: ServiceStateManagementTaskDetails;
    latestModificationAudit?: ServiceOrderDetails;
    deployRequest: DeployRequest;
    /**
     * The resource list of the deployed service.
     */
    deployResources?: Array<DeployResource>;
    /**
     * The properties of the deployed service.
     */
    deployedServiceProperties?: {
        [key: string]: string;
    };
    /**
     * The result message of the deployed service.
     */
    resultMessage?: string;
};

export type VendorHostedDeployedServiceDetails = {
    /**
     * The ID of the service
     */
    serviceId: string;
    /**
     * The catalog of the service
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The name of the service
     */
    name: string;
    /**
     * Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated
     */
    customerServiceName?: string;
    /**
     * The version of the service
     */
    version: string;
    /**
     * The provider of the service
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The flavor of the service
     */
    flavor?: string;
    /**
     * The id of the Service Template
     */
    serviceTemplateId?: string;
    /**
     * The id of the user who deployed the service.
     */
    userId?: string;
    /**
     * The deployment state of the service
     */
    serviceDeploymentState:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * The run state of the service
     */
    serviceState: 'not running' | 'running' | 'starting' | 'stopping' | 'stopped' | 'restarting';
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    /**
     * Time of register service.
     */
    createTime: string;
    /**
     * Time of update service.
     */
    lastModifiedTime: string;
    /**
     * Time of start service.
     */
    lastStartedAt?: string;
    /**
     * Time of stop service.
     */
    lastStoppedAt?: string;
    lockConfig?: ServiceLockConfig;
    latestRunningManagementTask?: ServiceStateManagementTaskDetails;
    latestModificationAudit?: ServiceOrderDetails;
    deployRequest: DeployRequest;
    /**
     * The properties of the deployed service.
     */
    deployedServiceProperties?: {
        [key: string]: string;
    };
};

export type FlavorPriceResult = {
    /**
     * The name of the flavor.
     */
    flavorName: string;
    /**
     * The billing mode of the price.
     */
    billingMode: 'Fixed' | 'Pay per Use';
    recurringPrice?: Price;
    oneTimePaymentPrice?: Price;
    /**
     * Error reason when price calculation fails.
     */
    errorMessage?: string;
    successful?: boolean;
};

export type Metric = {
    /**
     * The name of the metric.
     */
    name: string;
    /**
     * The description of the metric.
     */
    description?: string;
    /**
     * The type of the metric.
     */
    type: 'counter' | 'gauge' | 'histogram' | 'summary';
    /**
     * The resource type of the metric.
     */
    monitorResourceType: 'cpu' | 'mem' | 'vm_network_incoming' | 'vm_network_outgoing';
    /**
     * The unit of the metric.
     */
    unit: 'mb' | 'kb' | 'percentage' | 'bit/s' | 'Byte/s';
    /**
     * The labels of the metric.
     */
    labels?: {
        [key: string]: string;
    };
    /**
     * The list of the metric items.
     */
    metrics?: Array<MetricItem>;
};

/**
 * The type of the metric.
 */
export enum type2 {
    COUNTER = 'counter',
    GAUGE = 'gauge',
    HISTOGRAM = 'histogram',
    SUMMARY = 'summary',
}

/**
 * The resource type of the metric.
 */
export enum monitorResourceType {
    CPU = 'cpu',
    MEM = 'mem',
    VM_NETWORK_INCOMING = 'vm_network_incoming',
    VM_NETWORK_OUTGOING = 'vm_network_outgoing',
}

/**
 * The unit of the metric.
 */
export enum unit {
    MB = 'mb',
    KB = 'kb',
    PERCENTAGE = 'percentage',
    BIT_S = 'bit/s',
    BYTE_S = 'Byte/s',
}

/**
 * The list of the metric items.
 */
export type MetricItem = {
    /**
     * The labels for the MetricItem.
     */
    labels?: {
        [key: string]: string;
    };
    /**
     * Type of the MetricItem.
     */
    type: 'value' | 'count' | 'sum';
    /**
     * Timestamp of the recorded metric.
     */
    timeStamp: number;
    /**
     * value of the MetricItem.
     */
    value: number;
};

/**
 * Type of the MetricItem.
 */
export enum type3 {
    VALUE = 'value',
    COUNT = 'count',
    SUM = 'sum',
}

/**
 * The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled.
 */
export type BackendSystemStatus = {
    /**
     * The type of backend system.
     */
    backendSystemType:
        | 'Identity Provider'
        | 'Database'
        | 'Terraform Boot'
        | 'Tofu Maker'
        | 'Policy Man'
        | 'OpenTelemetry Collector';
    /**
     * The name of backend system.
     */
    name: string;
    /**
     * The health status of backend system.
     */
    healthStatus: 'OK' | 'NOK';
    /**
     * The endpoint of backend system. This filed is shown when the user have role 'admin' otherwise it is null.
     */
    endpoint?: string;
    /**
     * The details why health is not ok.This filed is shown when the user have role 'admin' otherwise it is null.
     */
    details?: string;
};

/**
 * The type of backend system.
 */
export enum backendSystemType {
    IDENTITY_PROVIDER = 'Identity Provider',
    DATABASE = 'Database',
    TERRAFORM_BOOT = 'Terraform Boot',
    TOFU_MAKER = 'Tofu Maker',
    POLICY_MAN = 'Policy Man',
    OPEN_TELEMETRY_COLLECTOR = 'OpenTelemetry Collector',
}

/**
 * The health status of backend system.
 */
export enum healthStatus {
    OK = 'OK',
    NOK = 'NOK',
}

export type SystemStatus = {
    /**
     * The health status of Xpanse api service.
     */
    healthStatus: 'OK' | 'NOK';
    /**
     * The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled.
     */
    backendSystemStatuses: Array<BackendSystemStatus>;
};

/**
 * The flavors of the orderable service.
 */
export type ServiceFlavor = {
    /**
     * The flavor name
     */
    name: string;
    /**
     * The properties of the flavor
     */
    properties: {
        [key: string]: string;
    };
    /**
     * The priority of the flavor. The larger value means lower priority.
     */
    priority: number;
    /**
     * Important features and differentiators of the flavor.
     */
    features?: Array<string>;
};

export type UserOrderableServiceVo = {
    /**
     * The id of the orderable service.
     */
    serviceTemplateId: string;
    /**
     * The category of the orderable service.
     */
    category:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * The name of the orderable service.
     */
    name: string;
    /**
     * The version of the orderable service.
     */
    version: string;
    /**
     * The Cloud Service Provider of the orderable service.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The regions of the Cloud Service Provider.
     */
    regions: Array<Region>;
    /**
     * The description of the orderable service.
     */
    description: string;
    /**
     * The icon of the orderable service.
     */
    icon: string;
    /**
     * The variables for the deployment, which will be passed to the deployer.
     */
    variables: Array<DeployVariable>;
    /**
     * The flavors of the orderable service.
     */
    flavors: Array<ServiceFlavor>;
    billing: Billing;
    /**
     * Defines which cloud service account is used for deploying cloud resources.
     */
    serviceHostingType: 'self' | 'service-vendor';
    serviceProviderContactDetails: ServiceProviderContactDetails;
    /**
     * The list of availability zone configuration of the service.
     */
    serviceAvailabilityConfigs?: Array<AvailabilityZoneConfig>;
    /**
     * End user license agreement content of the service.
     */
    eula?: string;
    links?: Array<Link>;
};

export type TokenResponse = {
    /**
     * An access_token as a JWT or opaque token.
     */
    access_token: string;
    /**
     * Type of the access_token.
     */
    token_type: string;
    /**
     * Number of second until the expiration of the access_token
     */
    expires_in: string;
    /**
     * An id_token of the authorized service user
     */
    id_token: string;
    /**
     * Scopes of the access_token.
     */
    scopes?: string;
};

export type ManageFailedOrderData = {
    /**
     * ID of the workflow task that needs to be handled
     */
    id: string;
    /**
     * Controls if the order must be retried again or simply closed.
     */
    retryOrder: boolean;
};

export type ManageFailedOrderResponse = unknown;

export type CompleteTaskData = {
    /**
     * ID of the workflow task that needs to be handled
     */
    id: string;
    requestBody: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
};

export type CompleteTaskResponse = unknown;

export type GetUserCloudCredentialsData = {
    /**
     * The cloud service provider.
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The type of credential.
     */
    type?: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
};

export type GetUserCloudCredentialsResponse = Array<AbstractCredentialInfo>;

export type UpdateUserCloudCredentialData = {
    requestBody: CreateCredential;
};

export type UpdateUserCloudCredentialResponse = void;

export type AddUserCloudCredentialData = {
    requestBody: CreateCredential;
};

export type AddUserCloudCredentialResponse = void;

export type DeleteUserCloudCredentialData = {
    /**
     * The cloud service provider.
     */
    cspName:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The name of of credential.
     */
    name: string;
    /**
     * The type of credential.
     */
    type: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
};

export type DeleteUserCloudCredentialResponse = void;

export type StopServiceData = {
    serviceId: string;
};

export type StopServiceResponse = string;

export type StartServiceData = {
    serviceId: string;
};

export type StartServiceResponse = string;

export type RestartServiceData = {
    serviceId: string;
};

export type RestartServiceResponse = string;

export type ModifyData = {
    requestBody: ModifyRequest;
    /**
     * Id of the service
     */
    serviceId: string;
};

export type ModifyResponse = ServiceOrder;

export type RedeployFailedDeploymentData = {
    serviceId: string;
};

export type RedeployFailedDeploymentResponse = ServiceOrder;

export type ChangeServiceLockConfigData = {
    requestBody: ServiceLockConfig;
    /**
     * Id of the service
     */
    serviceId: string;
};

export type ChangeServiceLockConfigResponse = void;

export type DetailsData = {
    /**
     * id of service template
     */
    id: string;
};

export type DetailsResponse = ServiceTemplateDetailVo;

export type UpdateData = {
    /**
     * id of service template
     */
    id: string;
    requestBody: Ocl;
};

export type UpdateResponse = ServiceTemplateDetailVo;

export type DeleteServiceTemplateData = {
    /**
     * id of service template
     */
    id: string;
};

export type DeleteServiceTemplateResponse = void;

export type UnregisterData = {
    /**
     * id of service template
     */
    id: string;
};

export type UnregisterResponse = ServiceTemplateDetailVo;

export type ReviewRegistrationData = {
    /**
     * id of service template
     */
    id: string;
    requestBody: ReviewRegistrationRequest;
};

export type ReviewRegistrationResponse = void;

export type ReRegisterServiceTemplateData = {
    /**
     * id of service template
     */
    id: string;
};

export type ReRegisterServiceTemplateResponse = ServiceTemplateDetailVo;

export type FetchUpdateData = {
    /**
     * id of service template
     */
    id: string;
    /**
     * URL of Ocl file
     */
    oclLocation: string;
};

export type FetchUpdateResponse = ServiceTemplateDetailVo;

export type GetServicePolicyDetailsData = {
    id: string;
};

export type GetServicePolicyDetailsResponse = ServicePolicy;

export type UpdateServicePolicyData = {
    /**
     * ID of the policy to be updated
     */
    id: string;
    requestBody: ServicePolicyUpdateRequest;
};

export type UpdateServicePolicyResponse = ServicePolicy;

export type DeleteServicePolicyData = {
    id: string;
};

export type DeleteServicePolicyResponse = void;

export type GetPolicyDetailsData = {
    id: string;
};

export type GetPolicyDetailsResponse = UserPolicy;

export type UpdateUserPolicyData = {
    /**
     * ID of the policy to be updated
     */
    id: string;
    requestBody: UserPolicyUpdateRequest;
};

export type UpdateUserPolicyResponse = UserPolicy;

export type DeleteUserPolicyData = {
    id: string;
};

export type DeleteUserPolicyResponse = void;

export type GetIsvCloudCredentialsData = {
    /**
     * The cloud service provider.
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The type of credential.
     */
    type?: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
};

export type GetIsvCloudCredentialsResponse = Array<AbstractCredentialInfo>;

export type UpdateIsvCloudCredentialData = {
    requestBody: CreateCredential;
};

export type UpdateIsvCloudCredentialResponse = void;

export type AddIsvCloudCredentialData = {
    requestBody: CreateCredential;
};

export type AddIsvCloudCredentialResponse = void;

export type DeleteIsvCloudCredentialData = {
    /**
     * The cloud service provider.
     */
    cspName:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The name of of credential.
     */
    name: string;
    /**
     * The type of credential.
     */
    type: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
};

export type DeleteIsvCloudCredentialResponse = void;

export type ListDeployedServicesData = {
    /**
     * category of the service
     */
    categoryName?:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * name of the cloud service provider
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * name of the service
     */
    serviceName?: string;
    /**
     * deployment state of the service
     */
    serviceState?:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * version of the service
     */
    serviceVersion?: string;
};

export type ListDeployedServicesResponse = Array<DeployedService>;

export type DeployData = {
    requestBody: DeployRequest;
};

export type DeployResponse = ServiceOrder;

export type MigrateData = {
    requestBody: MigrateRequest;
};

export type MigrateResponse = string;

export type ListServiceTemplatesData = {
    /**
     * category of the service
     */
    categoryName?:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * name of the cloud service provider
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * who hosts ths cloud resources
     */
    serviceHostingType?: 'self' | 'service-vendor';
    /**
     * name of the service
     */
    serviceName?: string;
    /**
     * state of registration
     */
    serviceRegistrationState?: 'unregistered' | 'approval pending' | 'approved' | 'rejected';
    /**
     * version of the service
     */
    serviceVersion?: string;
};

export type ListServiceTemplatesResponse = Array<ServiceTemplateDetailVo>;

export type RegisterData = {
    requestBody: Ocl;
};

export type RegisterResponse = ServiceTemplateDetailVo;

export type FetchData = {
    /**
     * URL of Ocl file
     */
    oclLocation: string;
};

export type FetchResponse = ServiceTemplateDetailVo;

export type ListServicePoliciesData = {
    /**
     * The id of registered service template which the policy belongs to.
     */
    serviceTemplateId: string;
};

export type ListServicePoliciesResponse = Array<ServicePolicy>;

export type AddServicePolicyData = {
    requestBody: ServicePolicyCreateRequest;
};

export type AddServicePolicyResponse = ServicePolicy;

export type ListUserPoliciesData = {
    /**
     * Name of csp which the policy belongs to.
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * Is the policy enabled.
     */
    enabled?: boolean;
};

export type ListUserPoliciesResponse = Array<UserPolicy>;

export type AddUserPolicyData = {
    requestBody: UserPolicyCreateRequest;
};

export type AddUserPolicyResponse = UserPolicy;

export type RollbackCallbackData = {
    requestBody: OpenTofuResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type RollbackCallbackResponse = unknown;

export type PurgeCallbackData = {
    requestBody: OpenTofuResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type PurgeCallbackResponse = unknown;

export type ModifyCallbackData = {
    requestBody: OpenTofuResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type ModifyCallbackResponse = unknown;

export type DestroyCallbackData = {
    requestBody: OpenTofuResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type DestroyCallbackResponse = unknown;

export type DeployCallbackData = {
    requestBody: OpenTofuResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type DeployCallbackResponse = unknown;

export type RollbackCallback1Data = {
    requestBody: TerraformResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type RollbackCallback1Response = unknown;

export type PurgeCallback1Data = {
    requestBody: TerraformResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type PurgeCallback1Response = unknown;

export type ModifyCallback1Data = {
    requestBody: TerraformResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type ModifyCallback1Response = unknown;

export type DestroyCallback1Data = {
    requestBody: TerraformResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type DestroyCallback1Response = unknown;

export type DeployCallback1Data = {
    requestBody: TerraformResult;
    /**
     * id of the service instance
     */
    serviceId: string;
};

export type DeployCallback1Response = unknown;

export type QueryTasksData = {
    /**
     * the status of task
     */
    status?: 'done' | 'failed';
};

export type QueryTasksResponse = Array<WorkFlowTask>;

export type ListServiceStateManagementTasksData = {
    /**
     * id of the service
     */
    serviceId: string;
    /**
     * status of the task
     */
    taskStatus?: 'created' | 'in progress' | 'successful' | 'failed';
    /**
     * type of the management task
     */
    taskType?: 'start' | 'stop' | 'restart';
};

export type ListServiceStateManagementTasksResponse = Array<ServiceStateManagementTaskDetails>;

export type DeleteManagementTasksByServiceIdData = {
    /**
     * id of the service
     */
    serviceId: string;
};

export type DeleteManagementTasksByServiceIdResponse = void;

export type GetComputeResourceInventoryOfServiceData = {
    /**
     * Id of the deployed service
     */
    serviceId: string;
};

export type GetComputeResourceInventoryOfServiceResponse = Array<DeployResource>;

export type ListServiceOrdersData = {
    /**
     * Id of the service
     */
    serviceId: string;
    /**
     * Task status of the service order
     */
    taskStatus?: 'created' | 'in progress' | 'successful' | 'failed';
    /**
     * Task type of the service order.
     */
    taskType?: 'deploy' | 'redeploy' | 'modify' | 'destroy' | 'purge';
};

export type ListServiceOrdersResponse = Array<ServiceOrderDetails>;

export type DeleteOrdersByServiceIdData = {
    /**
     * Id of the service
     */
    serviceId: string;
};

export type DeleteOrdersByServiceIdResponse = void;

export type GetLatestServiceDeploymentStatusData = {
    /**
     * Last known service status to client. When provided, the service will wait for a configured period time until to see if there is a change to the last known state.
     */
    lastKnownServiceDeploymentState?:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * ID of the service
     */
    serviceId: string;
};

export type GetLatestServiceDeploymentStatusResponse = DeploymentStatusUpdate;

export type GetManagementTaskDetailsByTaskIdData = {
    /**
     * id of the task
     */
    taskId: string;
};

export type GetManagementTaskDetailsByTaskIdResponse = ServiceStateManagementTaskDetails;

export type DeleteManagementTaskByTaskIdData = {
    /**
     * id of the task
     */
    taskId: string;
};

export type DeleteManagementTaskByTaskIdResponse = void;

export type GetOrderDetailsByOrderIdData = {
    /**
     * Id of the service order
     */
    orderId: string;
};

export type GetOrderDetailsByOrderIdResponse = ServiceOrderDetails;

export type DeleteOrderByOrderIdData = {
    /**
     * Id of the service order
     */
    orderId: string;
};

export type DeleteOrderByOrderIdResponse = void;

export type GetLatestServiceOrderStatusData = {
    /**
     * Last known service order task status to client. When provided, the service will wait for a configured period time until to see if there is a change to the last known state.
     */
    lastKnownServiceDeploymentState?: 'created' | 'in progress' | 'successful' | 'failed';
    /**
     * Id of the service order
     */
    orderId: string;
};

export type GetLatestServiceOrderStatusResponse = ServiceOrderStatusUpdate;

export type ListServiceMigrationsData = {
    /**
     * Id of the service migrate
     */
    migrationId?: string;
    /**
     * Status of the service migrate
     */
    migrationStatus?:
        | 'MigrationStarted'
        | 'MigrationCompleted'
        | 'MigrationFailed'
        | 'DataExportStarted'
        | 'DataExportFailed'
        | 'DataExportCompleted'
        | 'DeployStarted'
        | 'DeployFailed'
        | 'DeployCompleted'
        | 'DataImportStarted'
        | 'DataImportFailed'
        | 'DataImportCompleted'
        | 'DestroyStarted'
        | 'DestroyFailed'
        | 'DestroyCompleted';
    /**
     * Id of the new service
     */
    newServiceId?: string;
    /**
     * Id of the old service
     */
    oldServiceId?: string;
};

export type ListServiceMigrationsResponse = Array<ServiceMigrationDetails>;

export type GetMigrationOrderDetailsByIdData = {
    /**
     * Migration ID
     */
    migrationId: string;
};

export type GetMigrationOrderDetailsByIdResponse = ServiceMigrationDetails;

export type ListDeployedServicesOfIsvData = {
    /**
     * category of the service
     */
    categoryName?:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * name of the cloud service provider
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * name of the service
     */
    serviceName?: string;
    /**
     * deployment state of the service
     */
    serviceState?:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * version of the service
     */
    serviceVersion?: string;
};

export type ListDeployedServicesOfIsvResponse = Array<DeployedService>;

export type GetServiceDetailsByIdForIsvData = {
    /**
     * Id of deployed service
     */
    serviceId: string;
};

export type GetServiceDetailsByIdForIsvResponse = DeployedServiceDetails;

export type ListDeployedServicesDetailsData = {
    /**
     * category of the service
     */
    categoryName?:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * name of the cloud service provider
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * name of the service
     */
    serviceName?: string;
    /**
     * deployment state of the service
     */
    serviceState?:
        | 'deploying'
        | 'deployment successful'
        | 'deployment failed'
        | 'destroying'
        | 'destroy successful'
        | 'destroy failed'
        | 'manual cleanup required'
        | 'rollback failed'
        | 'modifying'
        | 'modification failed'
        | 'modification successful';
    /**
     * version of the service
     */
    serviceVersion?: string;
};

export type ListDeployedServicesDetailsResponse = Array<DeployedService>;

export type GetVendorHostedServiceDetailsByIdData = {
    /**
     * Id of the service
     */
    serviceId: string;
};

export type GetVendorHostedServiceDetailsByIdResponse = VendorHostedDeployedServiceDetails;

export type GetSelfHostedServiceDetailsByIdData = {
    /**
     * Id of the service
     */
    serviceId: string;
};

export type GetSelfHostedServiceDetailsByIdResponse = DeployedServiceDetails;

export type GetServicePriceByFlavorData = {
    /**
     * mode of billing
     */
    billingMode: 'Fixed' | 'Pay per Use';
    /**
     * flavor name of the service
     */
    flavorName: string;
    /**
     * region name of the service
     */
    region: string;
    /**
     * id of the service template
     */
    templateId: string;
};

export type GetServicePriceByFlavorResponse = FlavorPriceResult;

export type GetPricesByServiceData = {
    /**
     * mode of billing
     */
    billingMode: 'Fixed' | 'Pay per Use';
    /**
     * region name of the service
     */
    region: string;
    /**
     * id of the service template
     */
    templateId: string;
};

export type GetPricesByServiceResponse = Array<FlavorPriceResult>;

export type GetMetricsData = {
    /**
     * Start UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the five minutes ago.
     */
    from?: number;
    /**
     * Return metrics collected in provided time interval. This depends on how the source systems have generated/collected metrics.
     */
    granularity?: number;
    /**
     * Types of the monitor resource.
     */
    monitorResourceType?: 'cpu' | 'mem' | 'vm_network_incoming' | 'vm_network_outgoing';
    /**
     * Returns only the last known metric. When this parameter is set then all other query parameters are ignored.
     */
    onlyLastKnownMetric?: boolean;
    /**
     * Id of resource in the deployed service
     */
    resourceId?: string;
    /**
     * Id of the deployed service
     */
    serviceId: string;
    /**
     * End UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the current time.
     */
    to?: number;
};

export type GetMetricsResponse = Array<Metric>;

export type HealthCheckResponse = SystemStatus;

export type GetActiveCspsResponse = Array<
    | 'HuaweiCloud'
    | 'FlexibleEngine'
    | 'OpenstackTestlab'
    | 'PlusServer'
    | 'RegioCloud'
    | 'AlibabaCloud'
    | 'aws'
    | 'azure'
    | 'GoogleCloudPlatform'
>;

export type ListManagedServiceTemplatesData = {
    /**
     * category of the service
     */
    categoryName?:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * who hosts ths cloud resources
     */
    serviceHostingType?: 'self' | 'service-vendor';
    /**
     * name of the service
     */
    serviceName?: string;
    /**
     * state of registration
     */
    serviceRegistrationState?: 'unregistered' | 'approval pending' | 'approved' | 'rejected';
    /**
     * version of the service
     */
    serviceVersion?: string;
};

export type ListManagedServiceTemplatesResponse = Array<ServiceTemplateDetailVo>;

export type GetRegistrationDetailsData = {
    /**
     * id of service template
     */
    id: string;
};

export type GetRegistrationDetailsResponse = ServiceTemplateDetailVo;

export type GetExistingResourceNamesWithKindData = {
    /**
     * name of the cloud service provider
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * kind of the CloudResource
     */
    deployResourceKind:
        | 'vm'
        | 'container'
        | 'publicIP'
        | 'vpc'
        | 'volume'
        | 'unknown'
        | 'security_group'
        | 'security_group_rule'
        | 'keypair'
        | 'subnet';
    /**
     * name of he region
     */
    region: string;
    /**
     * id of the deployed service
     */
    serviceId?: string;
};

export type GetExistingResourceNamesWithKindResponse = Array<string>;

export type GetAvailabilityZonesData = {
    /**
     * name of the cloud service provider
     */
    cspName:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * name of the region
     */
    regionName: string;
    /**
     * Id of the deployed service
     */
    serviceId?: string;
};

export type GetAvailabilityZonesResponse = Array<string>;

export type GetCredentialOpenApiData = {
    /**
     * The cloud service provider.
     */
    csp:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The type of credential.
     */
    type: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
};

export type GetCredentialOpenApiResponse = Link;

export type GetCredentialCapabilitiesData = {
    /**
     * name of the cloud service provider.
     */
    cspName:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * The name of credential.
     */
    name?: string;
    /**
     * The type of credential.
     */
    type?: 'variables' | 'http_authentication' | 'api_key' | 'oauth2';
};

export type GetCredentialCapabilitiesResponse = Array<AbstractCredentialInfo>;

export type GetCredentialTypesData = {
    /**
     * The cloud service provider.
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
};

export type GetCredentialTypesResponse = Array<'variables' | 'http_authentication' | 'api_key' | 'oauth2'>;

export type ListOrderableServicesData = {
    /**
     * category of the service
     */
    categoryName?:
        | 'ai'
        | 'compute'
        | 'container'
        | 'storage'
        | 'network'
        | 'database'
        | 'mediaService'
        | 'security'
        | 'middleware'
        | 'others';
    /**
     * name of the cloud service provider
     */
    cspName?:
        | 'HuaweiCloud'
        | 'FlexibleEngine'
        | 'OpenstackTestlab'
        | 'PlusServer'
        | 'RegioCloud'
        | 'AlibabaCloud'
        | 'aws'
        | 'azure'
        | 'GoogleCloudPlatform';
    /**
     * who hosts ths cloud resources
     */
    serviceHostingType?: 'self' | 'service-vendor';
    /**
     * name of the service
     */
    serviceName?: string;
    /**
     * version of the service
     */
    serviceVersion?: string;
};

export type ListOrderableServicesResponse = Array<UserOrderableServiceVo>;

export type GetOrderableServiceDetailsData = {
    /**
     * The id of orderable service.
     */
    id: string;
};

export type GetOrderableServiceDetailsResponse = UserOrderableServiceVo;

export type OpenApiData = {
    id: string;
};

export type OpenApiResponse = Link;

export type GetAccessTokenData = {
    /**
     * The authorization code.
     */
    code: string;
    /**
     * Opaque value used to maintain state.
     */
    state: string;
};

export type GetAccessTokenResponse = TokenResponse;

export type AuthorizeResponse = unknown;

export type DestroyData = {
    /**
     * Id of the service
     */
    serviceId: string;
};

export type DestroyResponse = ServiceOrder;

export type PurgeData = {
    /**
     * Id of the service
     */
    serviceId: string;
};

export type PurgeResponse = ServiceOrder;

export type $OpenApiTs = {
    '/xpanse/workflow/task/{id}': {
        put: {
            req: ManageFailedOrderData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/workflow/complete/task/{id}': {
        put: {
            req: CompleteTaskData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/user/credentials': {
        get: {
            req: GetUserCloudCredentialsData;
            res: {
                /**
                 * OK
                 */
                200: Array<AbstractCredentialInfo>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        put: {
            req: UpdateUserCloudCredentialData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        post: {
            req: AddUserCloudCredentialData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteUserCloudCredentialData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/stop/{serviceId}': {
        put: {
            req: StopServiceData;
            res: {
                /**
                 * Accepted
                 */
                202: string;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/start/{serviceId}': {
        put: {
            req: StartServiceData;
            res: {
                /**
                 * Accepted
                 */
                202: string;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/restart/{serviceId}': {
        put: {
            req: RestartServiceData;
            res: {
                /**
                 * Accepted
                 */
                202: string;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/modify/{serviceId}': {
        put: {
            req: ModifyData;
            res: {
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
                /**
                 * Id of the order task to modify the deployed service.
                 */
                default: ServiceOrder;
            };
        };
    };
    '/xpanse/services/deploy/retry/{serviceId}': {
        put: {
            req: RedeployFailedDeploymentData;
            res: {
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
                /**
                 * Id of the order task to redeploy the filed service.
                 */
                default: ServiceOrder;
            };
        };
    };
    '/xpanse/services/changelock/{serviceId}': {
        put: {
            req: ChangeServiceLockConfigData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates/{id}': {
        get: {
            req: DetailsData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        put: {
            req: UpdateData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteServiceTemplateData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates/unregister/{id}': {
        put: {
            req: UnregisterData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates/review/{id}': {
        put: {
            req: ReviewRegistrationData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates/re-register/{id}': {
        put: {
            req: ReRegisterServiceTemplateData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates/file/{id}': {
        put: {
            req: FetchUpdateData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service/policies/{id}': {
        get: {
            req: GetServicePolicyDetailsData;
            res: {
                /**
                 * OK
                 */
                200: ServicePolicy;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        put: {
            req: UpdateServicePolicyData;
            res: {
                /**
                 * OK
                 */
                200: ServicePolicy;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteServicePolicyData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/policies/{id}': {
        get: {
            req: GetPolicyDetailsData;
            res: {
                /**
                 * OK
                 */
                200: UserPolicy;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        put: {
            req: UpdateUserPolicyData;
            res: {
                /**
                 * OK
                 */
                200: UserPolicy;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteUserPolicyData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/isv/credentials': {
        get: {
            req: GetIsvCloudCredentialsData;
            res: {
                /**
                 * OK
                 */
                200: Array<AbstractCredentialInfo>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        put: {
            req: UpdateIsvCloudCredentialData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        post: {
            req: AddIsvCloudCredentialData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteIsvCloudCredentialData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services': {
        get: {
            req: ListDeployedServicesData;
            res: {
                /**
                 * OK
                 */
                200: Array<DeployedService>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        post: {
            req: DeployData;
            res: {
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
                /**
                 * Id of the order task to deploy the new service.
                 */
                default: ServiceOrder;
            };
        };
    };
    '/xpanse/services/migration': {
        post: {
            req: MigrateData;
            res: {
                /**
                 * Accepted
                 */
                202: string;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates': {
        get: {
            req: ListServiceTemplatesData;
            res: {
                /**
                 * OK
                 */
                200: Array<ServiceTemplateDetailVo>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        post: {
            req: RegisterData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service_templates/file': {
        post: {
            req: FetchData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/service/policies': {
        get: {
            req: ListServicePoliciesData;
            res: {
                /**
                 * OK
                 */
                200: Array<ServicePolicy>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        post: {
            req: AddServicePolicyData;
            res: {
                /**
                 * OK
                 */
                200: ServicePolicy;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/policies': {
        get: {
            req: ListUserPoliciesData;
            res: {
                /**
                 * OK
                 */
                200: Array<UserPolicy>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        post: {
            req: AddUserPolicyData;
            res: {
                /**
                 * OK
                 */
                200: UserPolicy;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/tofu-maker/rollback/{serviceId}': {
        post: {
            req: RollbackCallbackData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/tofu-maker/purge/{serviceId}': {
        post: {
            req: PurgeCallbackData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/tofu-maker/modify/{serviceId}': {
        post: {
            req: ModifyCallbackData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/tofu-maker/destroy/{serviceId}': {
        post: {
            req: DestroyCallbackData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/tofu-maker/deploy/{serviceId}': {
        post: {
            req: DeployCallbackData;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/terraform-boot/rollback/{serviceId}': {
        post: {
            req: RollbackCallback1Data;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/terraform-boot/purge/{serviceId}': {
        post: {
            req: PurgeCallback1Data;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/terraform-boot/modify/{serviceId}': {
        post: {
            req: ModifyCallback1Data;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/terraform-boot/destroy/{serviceId}': {
        post: {
            req: DestroyCallback1Data;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/webhook/terraform-boot/deploy/{serviceId}': {
        post: {
            req: DeployCallback1Data;
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/workflow/tasks': {
        get: {
            req: QueryTasksData;
            res: {
                /**
                 * OK
                 */
                200: Array<WorkFlowTask>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/{serviceId}/tasks': {
        get: {
            req: ListServiceStateManagementTasksData;
            res: {
                /**
                 * OK
                 */
                200: Array<ServiceStateManagementTaskDetails>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteManagementTasksByServiceIdData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/{serviceId}/resources/compute': {
        get: {
            req: GetComputeResourceInventoryOfServiceData;
            res: {
                /**
                 * OK
                 */
                200: Array<DeployResource>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/{serviceId}/orders': {
        get: {
            req: ListServiceOrdersData;
            res: {
                /**
                 * OK
                 */
                200: Array<ServiceOrderDetails>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteOrdersByServiceIdData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/{serviceId}/deployment/status': {
        get: {
            req: GetLatestServiceDeploymentStatusData;
            res: {
                /**
                 * OK
                 */
                200: DeploymentStatusUpdate;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/tasks/{taskId}': {
        get: {
            req: GetManagementTaskDetailsByTaskIdData;
            res: {
                /**
                 * OK
                 */
                200: ServiceStateManagementTaskDetails;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteManagementTaskByTaskIdData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/orders/{orderId}': {
        get: {
            req: GetOrderDetailsByOrderIdData;
            res: {
                /**
                 * OK
                 */
                200: ServiceOrderDetails;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
        delete: {
            req: DeleteOrderByOrderIdData;
            res: {
                /**
                 * No Content
                 */
                204: void;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/orders/{orderId}/status': {
        get: {
            req: GetLatestServiceOrderStatusData;
            res: {
                /**
                 * OK
                 */
                200: ServiceOrderStatusUpdate;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/migrations': {
        get: {
            req: ListServiceMigrationsData;
            res: {
                /**
                 * OK
                 */
                200: Array<ServiceMigrationDetails>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/migration/{migrationId}': {
        get: {
            req: GetMigrationOrderDetailsByIdData;
            res: {
                /**
                 * OK
                 */
                200: ServiceMigrationDetails;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/isv': {
        get: {
            req: ListDeployedServicesOfIsvData;
            res: {
                /**
                 * OK
                 */
                200: Array<DeployedService>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/isv/details/vendor_hosted/{serviceId}': {
        get: {
            req: GetServiceDetailsByIdForIsvData;
            res: {
                /**
                 * OK
                 */
                200: DeployedServiceDetails;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/details': {
        get: {
            req: ListDeployedServicesDetailsData;
            res: {
                /**
                 * OK
                 */
                200: Array<DeployedService>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/details/vendor_hosted/{serviceId}': {
        get: {
            req: GetVendorHostedServiceDetailsByIdData;
            res: {
                /**
                 * OK
                 */
                200: VendorHostedDeployedServiceDetails;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/details/self_hosted/{serviceId}': {
        get: {
            req: GetSelfHostedServiceDetailsByIdData;
            res: {
                /**
                 * OK
                 */
                200: DeployedServiceDetails;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/pricing/{templateId}/{region}/{billingMode}/{flavorName}': {
        get: {
            req: GetServicePriceByFlavorData;
            res: {
                /**
                 * OK
                 */
                200: FlavorPriceResult;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/pricing/service/{templateId}/{region}/{billingMode}': {
        get: {
            req: GetPricesByServiceData;
            res: {
                /**
                 * OK
                 */
                200: Array<FlavorPriceResult>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/metrics': {
        get: {
            req: GetMetricsData;
            res: {
                /**
                 * OK
                 */
                200: Array<Metric>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/health': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: SystemStatus;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/csps/active': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<
                    | 'HuaweiCloud'
                    | 'FlexibleEngine'
                    | 'OpenstackTestlab'
                    | 'PlusServer'
                    | 'RegioCloud'
                    | 'AlibabaCloud'
                    | 'aws'
                    | 'azure'
                    | 'GoogleCloudPlatform'
                >;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/csp/service_templates': {
        get: {
            req: ListManagedServiceTemplatesData;
            res: {
                /**
                 * OK
                 */
                200: Array<ServiceTemplateDetailVo>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/csp/service_templates/{id}': {
        get: {
            req: GetRegistrationDetailsData;
            res: {
                /**
                 * OK
                 */
                200: ServiceTemplateDetailVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/csp/resources/{deployResourceKind}': {
        get: {
            req: GetExistingResourceNamesWithKindData;
            res: {
                /**
                 * OK
                 */
                200: Array<string>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/csp/region/azs': {
        get: {
            req: GetAvailabilityZonesData;
            res: {
                /**
                 * OK
                 */
                200: Array<string>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/credentials/openapi/{csp}/{type}': {
        get: {
            req: GetCredentialOpenApiData;
            res: {
                /**
                 * OK
                 */
                200: Link;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/credentials/capabilities': {
        get: {
            req: GetCredentialCapabilitiesData;
            res: {
                /**
                 * OK
                 */
                200: Array<AbstractCredentialInfo>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/credential_types': {
        get: {
            req: GetCredentialTypesData;
            res: {
                /**
                 * OK
                 */
                200: Array<'variables' | 'http_authentication' | 'api_key' | 'oauth2'>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/catalog/services': {
        get: {
            req: ListOrderableServicesData;
            res: {
                /**
                 * OK
                 */
                200: Array<UserOrderableServiceVo>;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/catalog/services/{id}': {
        get: {
            req: GetOrderableServiceDetailsData;
            res: {
                /**
                 * OK
                 */
                200: UserOrderableServiceVo;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/catalog/services/{id}/openapi': {
        get: {
            req: OpenApiData;
            res: {
                /**
                 * OK
                 */
                200: Link;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/auth/token': {
        get: {
            req: GetAccessTokenData;
            res: {
                /**
                 * OK
                 */
                200: TokenResponse;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/auth/authorize': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
            };
        };
    };
    '/xpanse/services/{serviceId}': {
        delete: {
            req: DestroyData;
            res: {
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
                /**
                 * Id of the order task to destroy the deployed service.
                 */
                default: ServiceOrder;
            };
        };
    };
    '/xpanse/services/purge/{serviceId}': {
        delete: {
            req: PurgeData;
            res: {
                /**
                 * Bad Request
                 */
                400: Response;
                /**
                 * Unauthorized
                 */
                401: Response;
                /**
                 * Forbidden
                 */
                403: Response;
                /**
                 * Request Timeout
                 */
                408: Response;
                /**
                 * Unprocessable Entity
                 */
                422: Response;
                /**
                 * Internal Server Error
                 */
                500: Response;
                /**
                 * Bad Gateway
                 */
                502: Response;
                /**
                 * Id of the order task to purge the destroyed service.
                 */
                default: ServiceOrder;
            };
        };
    };
};
