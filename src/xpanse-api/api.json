{
    "openapi": "3.0.1",
    "info": {
        "title": "Xpanse API",
        "description": "RESTful Services to interact with Xpanse runtime",
        "version": "1.0.0-SNAPSHOT"
    },
    "servers": [{ "url": "http://localhost:8080", "description": "Generated server url" }],
    "security": [{ "OAuth2 Flow": ["openid", "email", "profile"] }],
    "tags": [
        { "name": "Credentials Management", "description": "APIs for managing user's cloud provider credentials" },
        { "name": "Admin", "description": "APIs for administrating Xpanse" },
        {
            "name": "Service Catalog",
            "description": "APIs to query the services which are available for the user to order."
        },
        { "name": "Auth Management", "description": "APIs for user authentication and authorization." },
        { "name": "Service", "description": "APIs to manage the service instances" },
        { "name": "Service Vendor", "description": "APIs to manage register services." },
        { "name": "Monitor", "description": "APIs to get metrics of deployed services." }
    ],
    "paths": {
        "/xpanse/services/register/{id}": {
            "get": {
                "tags": ["Service Vendor"],
                "description": "Get registered service using id.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of registered service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/RegisteredServiceVo" } }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Service Vendor"],
                "description": "Update registered service using id and ocl model.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of registered service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/RegisteredServiceVo" } }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Service Vendor"],
                "description": "Unregister registered service using id.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "unregister",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of registered service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    }
                }
            }
        },
        "/xpanse/services/register/file/{id}": {
            "put": {
                "tags": ["Service Vendor"],
                "description": "Update registered service using id and ocl file url.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "fetchUpdate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of registered service",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "oclLocation",
                        "in": "query",
                        "description": "URL of Ocl file",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/RegisteredServiceVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/auth/csp/credential": {
            "put": {
                "tags": ["Credentials Management"],
                "description": "Update user's credential for connecting to the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "updateCredential",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/CreateCredential" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            },
            "post": {
                "tags": ["Credentials Management"],
                "description": "Add user's credential for connecting to the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "addCredential",
                "requestBody": {
                    "content": {
                        "application/json": { "schema": { "$ref": "#/components/schemas/CreateCredential" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            }
        },
        "/xpanse/services/register": {
            "get": {
                "tags": ["Service Vendor"],
                "description": "List registered service with query params.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "listRegisteredServices",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "name of category of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the service provider",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/RegisteredServiceVo" }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Service Vendor"],
                "description": "Register new service using ocl model.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "register",
                "requestBody": {
                    "content": {
                        "application/x-yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yml": { "schema": { "$ref": "#/components/schemas/Ocl" } },
                        "application/yaml": { "schema": { "$ref": "#/components/schemas/Ocl" } }
                    },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/RegisteredServiceVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/register/file": {
            "post": {
                "tags": ["Service Vendor"],
                "description": "Register new service with URL of Ocl file.<br>Required role:<b> admin</b> or <b>csp</b>",
                "operationId": "fetch",
                "parameters": [
                    {
                        "name": "oclLocation",
                        "in": "query",
                        "description": "URL of Ocl file",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/RegisteredServiceVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/deploy": {
            "post": {
                "tags": ["Service"],
                "description": "Start a task to deploy registered service.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "deploy",
                "requestBody": {
                    "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreateRequest" } } },
                    "required": true
                },
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": { "application/json": { "schema": { "type": "string", "format": "uuid" } } }
                    }
                }
            }
        },
        "/xpanse/services/deployed": {
            "get": {
                "tags": ["Service"],
                "description": "List all deployed services by a user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listMyDeployedServices",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/ServiceVo" } }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/deployed/{id}/details": {
            "get": {
                "tags": ["Service"],
                "description": "Get deployed service details by id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getDeployedServiceDetailsById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task id of deployed service",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/ServiceDetailVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/available": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "Returns the list of all registered services that are available for user to order.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "listAvailableServices",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "query",
                        "description": "name of category of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "cspName",
                        "in": "query",
                        "description": "name of the service provider",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceName",
                        "in": "query",
                        "description": "name of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "serviceVersion",
                        "in": "query",
                        "description": "version of the service",
                        "required": false,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/UserAvailableServiceVo" }
                                }
                            },
                            "application/hal+json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/UserAvailableServiceVo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/services/available/{id}": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "Get deployable service by id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "availableServiceDetails",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of available service.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/UserAvailableServiceVo" } }
                        }
                    }
                }
            }
        },
        "/xpanse/services/available/{id}/openapi": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "Get the API document of the available service.<br>Required role:<b> admin</b> or <b>csp</b> or <b>user</b>",
                "operationId": "openApi",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Link" } } }
                    }
                }
            }
        },
        "/xpanse/services/available/category/{categoryName}": {
            "get": {
                "tags": ["Service Catalog"],
                "description": "Get the available services by tree.<br>Required role:<b> admin</b> or <b>csp</b> or <b>user</b>",
                "operationId": "getAvailableServicesTree",
                "parameters": [
                    {
                        "name": "categoryName",
                        "in": "path",
                        "description": "category of the service",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ai",
                                "compute",
                                "container",
                                "storage",
                                "network",
                                "database",
                                "mediaService",
                                "security",
                                "middleware",
                                "others"
                            ]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CategoryOclVo" } }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/monitor/metric/service/{id}": {
            "get": {
                "tags": ["Monitor"],
                "description": "Get metrics of all resources in a deployed service.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getMetricsByServiceId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the deployed service",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "monitorResourceType",
                        "in": "query",
                        "description": "Types of the monitor resource.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["cpu", "mem", "vm_network_incoming", "vm_network_outgoing"]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Start UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the five minutes ago.",
                        "required": false,
                        "schema": { "minimum": 0, "type": "integer", "format": "int64" }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "End UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the current time.",
                        "required": false,
                        "schema": { "minimum": 0, "type": "integer", "format": "int64" }
                    },
                    {
                        "name": "granularity",
                        "in": "query",
                        "description": "Return metrics collected in provided time interval. This depends on how the source systems have generated/collected metrics.",
                        "required": false,
                        "schema": { "type": "integer", "format": "int32" }
                    },
                    {
                        "name": "onlyLastKnownMetric",
                        "in": "query",
                        "description": "Returns only the last known metric. When this parameter is set then all other query parameters are ignored.",
                        "required": false,
                        "schema": { "type": "boolean", "default": false }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Metric" } }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/monitor/metric/resource/{id}": {
            "get": {
                "tags": ["Monitor"],
                "description": "Get metrics of a specific deployed resource.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getMetricsByResourceId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the deployed resource.",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "monitorResourceType",
                        "in": "query",
                        "description": "Types of the monitor resource.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["cpu", "mem", "vm_network_incoming", "vm_network_outgoing"]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Start UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the five minutes ago.",
                        "required": false,
                        "schema": { "minimum": 0, "type": "integer", "format": "int64" }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "End UNIX timestamp in milliseconds. If no value filled,the default value is the UNIX timestamp in milliseconds of the current time.",
                        "required": false,
                        "schema": { "minimum": 0, "type": "integer", "format": "int64" }
                    },
                    {
                        "name": "granularity",
                        "in": "query",
                        "description": "Return metrics collected in provided time interval. This depends on how the source systems have generated/collected metrics.",
                        "required": false,
                        "schema": { "type": "integer", "format": "int32" }
                    },
                    {
                        "name": "onlyLastKnownMetric",
                        "in": "query",
                        "description": "Returns only the last known metric. When this parameter is set then all other query parameters are ignored.",
                        "required": false,
                        "schema": { "type": "boolean" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Metric" } }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/health": {
            "get": {
                "tags": ["Admin"],
                "description": "Check health of API service and backend systems.<br>Required role:<b> admin</b> or <b>csp</b> or <b>user</b>",
                "operationId": "healthCheck",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SystemStatus" } } }
                    }
                }
            }
        },
        "/xpanse/auth/user/credentials": {
            "get": {
                "tags": ["Credentials Management"],
                "description": "Get all cloud provider credentials added by the user.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getCredentialsByUser",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/AbstractCredentialInfo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/auth/csp/{cspName}/openapi/{type}": {
            "get": {
                "tags": ["Credentials Management"],
                "description": "Returns the OpenAPI document for adding a credential.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getCredentialOpenApi",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "path",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of credential.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Link" } } }
                    }
                }
            }
        },
        "/xpanse/auth/csp/{cspName}/credentials": {
            "get": {
                "tags": ["Credentials Management"],
                "description": "Get all cloud provider credentials added by the user for a cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getCredentials",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "path",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/AbstractCredentialInfo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/auth/csp/{cspName}/credential/types": {
            "get": {
                "tags": ["Credentials Management"],
                "description": "Get the credential types supported by the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getCredentialTypesByCsp",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "path",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/xpanse/auth/csp/{cspName}/credential/capabilities": {
            "get": {
                "tags": ["Credentials Management"],
                "description": "Get the credential capabilities defined by the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "getCredentialCapabilitiesByCsp",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "path",
                        "description": "name of the cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of credential.",
                        "required": false,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": { "$ref": "#/components/schemas/AbstractCredentialInfo" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "get": {
                "tags": ["Auth Management"],
                "description": "Get token info by authorization code.",
                "operationId": "getAccessToken",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The authorization code.",
                        "required": true,
                        "schema": { "type": "string" }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "Opaque value used to maintain state.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": { "schema": { "$ref": "#/components/schemas/TokenResponse" } }
                        }
                    }
                }
            }
        },
        "/auth/authorize": {
            "get": {
                "tags": ["Auth Management"],
                "description": "Get and redirect authorization url for user to authenticate.",
                "operationId": "authorize",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "200": { "description": "OK" }
                }
            }
        },
        "/xpanse/services/destroy/{id}": {
            "delete": {
                "tags": ["Service"],
                "description": "Start a task to destroy the deployed service using id.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "destroy",
                "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    }
                }
            }
        },
        "/xpanse/auth/csp/{cspName}/credential": {
            "delete": {
                "tags": ["Credentials Management"],
                "description": "Delete user's credential for connecting to the cloud service provider.<br>Required role:<b> admin</b> or <b>user</b>",
                "operationId": "deleteCredential",
                "parameters": [
                    {
                        "name": "cspName",
                        "in": "path",
                        "description": "The cloud service provider.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of credential.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of of credential.",
                        "required": true,
                        "schema": { "type": "string" }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Response" } } }
                    },
                    "204": { "description": "No Content" }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Response": {
                "required": ["details", "resultType", "success"],
                "type": "object",
                "properties": {
                    "resultType": {
                        "type": "string",
                        "description": "The result code of response.",
                        "enum": [
                            "Success",
                            "Runtime Error",
                            "Parameters Invalid",
                            "Terraform Script Invalid",
                            "Unprocessable Entity",
                            "Response Not Valid",
                            "Failure while connecting to backend",
                            "Credential Capability Not Found",
                            "Credentials Not Found",
                            "Credential Variables Not Complete",
                            "Flavor Invalid",
                            "Terraform Execution Failed",
                            "Plugin Not Found",
                            "Deployer Not Found",
                            "Terraform Provider Not Found",
                            "No Credential Definition Available",
                            "Invalid Service State",
                            "Resource Invalid For Monitoring",
                            "Unhandled Exception",
                            "Service Already Registered",
                            "Icon Processing Failed",
                            "Service Not Registered",
                            "Service Deployment Not Found",
                            "Resource Not Found",
                            "Deployment Variable Invalid",
                            "Service Update Not Allowed",
                            "Unauthorized",
                            "Access Denied",
                            "Sensitive Field Encryption Or Decryption Failed Exception",
                            "Unsupported Enum Value"
                        ]
                    },
                    "details": {
                        "type": "array",
                        "description": "Details of the errors occurred",
                        "items": { "type": "string", "description": "Details of the errors occurred" }
                    },
                    "success": { "type": "boolean", "description": "Describes if the request is successful" }
                }
            },
            "Billing": {
                "required": ["currency", "model", "period"],
                "type": "object",
                "properties": {
                    "model": { "type": "string", "description": "The business model of the managed service" },
                    "period": {
                        "type": "string",
                        "description": "The rental period of the managed service",
                        "enum": ["daily", "weekly", "monthly", "quarterly", "yearly"]
                    },
                    "currency": {
                        "type": "string",
                        "description": "The billing currency of the managed service, valid values: euro,uso",
                        "enum": ["usd", "euro", "gbp", "cad", "dem", "frf", "cny"]
                    }
                },
                "description": "The billing policy of the managed service"
            },
            "CloudServiceProvider": {
                "required": ["name", "regions"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Cloud Service Provider.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "regions": {
                        "type": "array",
                        "description": "The regions of the Cloud Service Provider",
                        "items": { "$ref": "#/components/schemas/Region" }
                    }
                },
                "description": "The cloud service provider of the managed service"
            },
            "DeployVariable": {
                "required": ["dataType", "description", "kind", "mandatory", "name"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the deploy variable" },
                    "kind": { "$ref": "#/components/schemas/DeployVariableKind" },
                    "dataType": {
                        "type": "string",
                        "description": "The type of the deploy variable",
                        "enum": ["string", "number", "boolean"]
                    },
                    "example": { "type": "string", "description": "The default value of the deploy variable" },
                    "description": { "type": "string", "description": "The description of the deploy variable" },
                    "value": {
                        "type": "string",
                        "description": "The value of the deploy variable. Value can be provided for default variables"
                    },
                    "mandatory": { "type": "boolean", "description": "Indicates if the variable is mandatory" },
                    "validator": { "type": "string", "description": "Validator of the variable" },
                    "sensitiveScope": {
                        "type": "string",
                        "description": "Sensitive scope of variable storage",
                        "enum": ["none", "once", "always"]
                    }
                },
                "description": "The variables for the deployment, which will be passed to the deployer"
            },
            "DeployVariableKind": {
                "type": "string",
                "description": "- `fix_env`: Values for variable of this type are defined by the managed service provider \nin the OCL template. Runtime will inject it to deployer as environment variables. \nThis variable is not visible to the end user.\n- `fix_variable`: Values for variable of this type are defined by the managed service \nprovider in the OCL template. Runtime will inject it to deployer as usual variables. \nThis variable is not visible to the end user.\n- `env`: Value for a variable of this type can be provided by end user. \nIf marked as mandatory then end user must provide value to this variable. \nIf marked as optional and if end user does not provide it, \nthen the fallback value to this variable is read by runtime (it can read from other sources,\n e.g., OS env variables). This variable is injected as an environment \n variable to the deployer.\n- `variable`: Value for a variable of this type can be provided by end user. \nIf marked as mandatory then end user must provide value to this variable. \nIf marked as optional and if end user does not provide it, \nthen the fallback value to this variable is read by runtime (it can read from other sources,\n e.g., OS env variables). This variable is injected as a regular variable to the deployer.\n- `env_env`: Value to this variable is read by runtime \n(it can read from other sources, e.g., OS env variables) \nand injected as an environment variable to the deployer. \nEnd user cannot see or change this variable.\n- `env_variable`: Value to this variable is read by runtime \n(it can read from other sources, e.g., OS env variables) \nand injected as a regular variable to the deployer. \nEnd user cannot see or change this variable.",
                "enum": ["fix_env", "fix_variable", "env", "variable", "env_env", "env_variable"]
            },
            "Deployment": {
                "required": ["deployer", "kind", "variables"],
                "type": "object",
                "properties": {
                    "kind": {
                        "type": "string",
                        "description": "The type of the Deployer which will handle the service deployment",
                        "enum": ["terraform"]
                    },
                    "variables": {
                        "type": "array",
                        "description": "The variables for the deployment, which will be passed to the deployer",
                        "items": { "$ref": "#/components/schemas/DeployVariable" }
                    },
                    "credentialType": {
                        "type": "string",
                        "description": "The credential type to do the deployment",
                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                    },
                    "deployer": {
                        "type": "string",
                        "description": "The real deployer, something like terraform scripts..."
                    }
                },
                "description": "The deployment of the managed service"
            },
            "Flavor": {
                "required": ["fixedPrice", "name", "properties"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The flavor name" },
                    "fixedPrice": { "type": "integer", "description": "The price of the flavor", "format": "int32" },
                    "properties": {
                        "type": "object",
                        "additionalProperties": { "type": "string", "description": "The properties of the flavor" },
                        "description": "The properties of the flavor"
                    }
                },
                "description": "The flavors of the managed service"
            },
            "Ocl": {
                "required": [
                    "billing",
                    "category",
                    "cloudServiceProvider",
                    "deployment",
                    "description",
                    "flavors",
                    "icon",
                    "name",
                    "namespace",
                    "serviceVersion",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "version": { "type": "string", "description": "The version of the Ocl" },
                    "name": { "type": "string", "description": "The name of the managed service" },
                    "serviceVersion": { "type": "string", "description": "The version of the managed service" },
                    "description": { "type": "string", "description": "The description of the managed service" },
                    "namespace": { "type": "string", "description": "The namespace of the managed service" },
                    "icon": { "type": "string", "description": "The icon of the managed service" },
                    "cloudServiceProvider": { "$ref": "#/components/schemas/CloudServiceProvider" },
                    "deployment": { "$ref": "#/components/schemas/Deployment" },
                    "flavors": {
                        "type": "array",
                        "description": "The flavors of the managed service",
                        "items": { "$ref": "#/components/schemas/Flavor" }
                    },
                    "billing": { "$ref": "#/components/schemas/Billing" }
                }
            },
            "Region": {
                "required": ["area", "name"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the Region" },
                    "area": {
                        "type": "string",
                        "description": "The area which the region belongs to, such as Asia, Europe, Africa"
                    }
                },
                "description": "The regions of the Cloud Service Provider"
            },
            "Link": {
                "type": "object",
                "properties": {
                    "rel": { "type": "string" },
                    "href": { "type": "string" },
                    "hreflang": { "type": "string" },
                    "media": { "type": "string" },
                    "title": { "type": "string" },
                    "type": { "type": "string" },
                    "deprecation": { "type": "string" },
                    "profile": { "type": "string" },
                    "name": { "type": "string" }
                }
            },
            "RegisteredServiceVo": {
                "required": [
                    "category",
                    "createTime",
                    "csp",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "ocl",
                    "serviceRegistrationState",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "ID of the registered service.", "format": "uuid" },
                    "name": { "type": "string", "description": "Name of the registered service." },
                    "version": { "type": "string", "description": "Version of the registered service." },
                    "csp": {
                        "type": "string",
                        "description": "Csp of the registered service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the registered service.",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "ocl": { "$ref": "#/components/schemas/Ocl" },
                    "createTime": {
                        "type": "string",
                        "description": "createTime of the registered service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Last updateTime of the registered service.",
                        "format": "date-time"
                    },
                    "serviceRegistrationState": {
                        "type": "string",
                        "description": "State of service.",
                        "enum": ["REGISTERED", "UPDATED"]
                    },
                    "links": { "type": "array", "items": { "$ref": "#/components/schemas/Link" } }
                }
            },
            "CreateCredential": {
                "required": ["csp", "name", "timeToLive", "type", "variables"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the credential" },
                    "csp": {
                        "type": "string",
                        "description": "The cloud service provider of the credential.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "description": { "type": "string", "description": "The description of the credential" },
                    "type": {
                        "type": "string",
                        "description": "The type of the credential",
                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                    },
                    "variables": {
                        "type": "array",
                        "description": "The variables list of the credential",
                        "items": { "$ref": "#/components/schemas/CredentialVariable" }
                    },
                    "timeToLive": {
                        "type": "integer",
                        "description": "The time in seconds to live of the credential",
                        "format": "int32",
                        "default": 3600
                    }
                }
            },
            "CredentialVariable": {
                "required": ["description", "isSensitive", "name", "value"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the CredentialVariable,this field is provided by the the plugin of cloud service provider."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the CredentialVariable,this field is provided by the plugin of cloud service provider."
                    },
                    "isMandatory": {
                        "type": "boolean",
                        "description": "If the variable is mandatory. If is optional then the credential completeness check will ignore this variable. It is upto the plugin to decide what needs to be done if this optional credential variable is present.",
                        "default": true
                    },
                    "isSensitive": {
                        "type": "boolean",
                        "description": "Defines if the particular variable contains sensitive data. For example the value is false for username and true for password variables respectively."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the CredentialVariable, this field is filled by the user."
                    }
                },
                "description": "The variables list of the credential"
            },
            "CreateRequest": {
                "required": ["category", "csp", "flavor", "region", "serviceName", "version"],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The category of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "serviceName": { "type": "string", "description": "The name of the service ordered." },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of service" },
                    "region": { "type": "string", "description": "The region of the provider." },
                    "csp": {
                        "type": "string",
                        "description": "The csp of the Service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the Service." },
                    "serviceRequestProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The properties for the requested service"
                        },
                        "description": "The properties for the requested service"
                    }
                }
            },
            "ServiceVo": {
                "required": [
                    "category",
                    "createTime",
                    "csp",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "serviceDeploymentState",
                    "userId",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The ID of the service", "format": "uuid" },
                    "userId": { "type": "string", "description": "The id of the user who deployed the service" },
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the service" },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of the service" },
                    "csp": {
                        "type": "string",
                        "description": "The provider of the service",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the service" },
                    "serviceDeploymentState": {
                        "type": "string",
                        "description": "The state of the service",
                        "enum": [
                            "DEPLOYING",
                            "DEPLOY_SUCCESS",
                            "DEPLOY_FAILED",
                            "DESTROYING",
                            "DESTROY_SUCCESS",
                            "DESTROY_FAILED"
                        ]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of register service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of update service.",
                        "format": "date-time"
                    }
                }
            },
            "DeployResource": {
                "required": ["kind", "name", "properties", "resourceId"],
                "type": "object",
                "properties": {
                    "resourceId": { "type": "string", "description": "The id of the deployed resource." },
                    "name": { "type": "string", "description": "The name of the deployed resource." },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the deployed resource.",
                        "enum": ["vm", "container", "publicIP", "vpc", "volume", "unknown"]
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The properties of the deployed resource."
                        },
                        "description": "The properties of the deployed resource."
                    }
                },
                "description": "The resource list of the deployed service."
            },
            "ServiceDetailVo": {
                "required": [
                    "category",
                    "createRequest",
                    "createTime",
                    "csp",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "serviceDeploymentState",
                    "userId",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The ID of the service", "format": "uuid" },
                    "userId": { "type": "string", "description": "The id of the user who deployed the service" },
                    "category": {
                        "type": "string",
                        "description": "The catalog of the service",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the service" },
                    "customerServiceName": {
                        "type": "string",
                        "description": "Customer's name for the service. Used only for customer's reference.If not provided, this value will be auto-generated"
                    },
                    "version": { "type": "string", "description": "The version of the service" },
                    "csp": {
                        "type": "string",
                        "description": "The provider of the service",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "flavor": { "type": "string", "description": "The flavor of the service" },
                    "serviceDeploymentState": {
                        "type": "string",
                        "description": "The state of the service",
                        "enum": [
                            "DEPLOYING",
                            "DEPLOY_SUCCESS",
                            "DEPLOY_FAILED",
                            "DESTROYING",
                            "DESTROY_SUCCESS",
                            "DESTROY_FAILED"
                        ]
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Time of register service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "Time of update service.",
                        "format": "date-time"
                    },
                    "createRequest": { "$ref": "#/components/schemas/CreateRequest" },
                    "deployResources": {
                        "type": "array",
                        "description": "The resource list of the deployed service.",
                        "items": { "$ref": "#/components/schemas/DeployResource" }
                    },
                    "deployedServiceProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "The properties of the deployed service."
                        },
                        "description": "The properties of the deployed service."
                    },
                    "resultMessage": { "type": "string", "description": "The result message of the deployed service." }
                }
            },
            "UserAvailableServiceVo": {
                "required": [
                    "billing",
                    "category",
                    "createTime",
                    "csp",
                    "deployment",
                    "description",
                    "flavors",
                    "icon",
                    "id",
                    "lastModifiedTime",
                    "name",
                    "namespace",
                    "regions",
                    "serviceRegistrationState",
                    "variables",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "The id of the available service.", "format": "uuid" },
                    "category": {
                        "type": "string",
                        "description": "The catalog of the available service.",
                        "enum": [
                            "ai",
                            "compute",
                            "container",
                            "storage",
                            "network",
                            "database",
                            "mediaService",
                            "security",
                            "middleware",
                            "others"
                        ]
                    },
                    "name": { "type": "string", "description": "The name of the available service." },
                    "version": { "type": "string", "description": "The version of the available service." },
                    "csp": {
                        "type": "string",
                        "description": "The Cloud Service Provider of the available service.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "regions": {
                        "type": "array",
                        "description": "The regions of the Cloud Service Provider.",
                        "items": { "$ref": "#/components/schemas/Region" }
                    },
                    "description": { "type": "string", "description": "The description of the available service." },
                    "namespace": { "type": "string", "description": "The namespace of the available service." },
                    "icon": { "type": "string", "description": "The icon of the available service." },
                    "deployment": { "$ref": "#/components/schemas/Deployment" },
                    "variables": {
                        "type": "array",
                        "description": "The variables for the deployment, which will be passed to the deployer.",
                        "items": { "$ref": "#/components/schemas/DeployVariable" }
                    },
                    "flavors": {
                        "type": "array",
                        "description": "The flavors of the available service.",
                        "items": { "$ref": "#/components/schemas/Flavor" }
                    },
                    "billing": { "$ref": "#/components/schemas/Billing" },
                    "createTime": {
                        "type": "string",
                        "description": "The registration time of the service.",
                        "format": "date-time"
                    },
                    "lastModifiedTime": {
                        "type": "string",
                        "description": "The latest update time of the available service.",
                        "format": "date-time"
                    },
                    "serviceRegistrationState": {
                        "type": "string",
                        "description": "The state of the available service.",
                        "enum": ["REGISTERED", "UPDATED"]
                    },
                    "links": { "type": "array", "items": { "$ref": "#/components/schemas/Link" } }
                }
            },
            "CategoryOclVo": {
                "required": ["name", "versions"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "Name of the registered service." },
                    "versions": {
                        "type": "array",
                        "description": "List of the registered service group by service version.",
                        "items": { "$ref": "#/components/schemas/VersionOclVo" }
                    }
                }
            },
            "ProviderOclVo": {
                "required": ["details", "name", "regions"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Cloud Service Provider.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "regions": {
                        "type": "array",
                        "description": "The regions of the Cloud Service Provider.",
                        "items": { "$ref": "#/components/schemas/Region" }
                    },
                    "details": {
                        "type": "array",
                        "description": "The list of the available services.",
                        "items": { "$ref": "#/components/schemas/UserAvailableServiceVo" }
                    }
                },
                "description": "List of the registered services group by service version."
            },
            "VersionOclVo": {
                "required": ["cloudProvider", "version"],
                "type": "object",
                "properties": {
                    "version": { "type": "string", "description": "Version of the registered service." },
                    "cloudProvider": {
                        "type": "array",
                        "description": "List of the registered services group by service version.",
                        "items": { "$ref": "#/components/schemas/ProviderOclVo" }
                    }
                },
                "description": "List of the registered service group by service version."
            },
            "Metric": {
                "required": ["monitorResourceType", "name", "type", "unit"],
                "type": "object",
                "properties": {
                    "name": { "type": "string", "description": "The name of the metric." },
                    "description": { "type": "string", "description": "The description of the metric." },
                    "type": {
                        "type": "string",
                        "description": "The type of the metric.",
                        "enum": ["counter", "gauge", "histogram", "summary"]
                    },
                    "monitorResourceType": {
                        "type": "string",
                        "description": "The resource type of the metric.",
                        "enum": ["cpu", "mem", "vm_network_incoming", "vm_network_outgoing"]
                    },
                    "unit": {
                        "type": "string",
                        "description": "The unit of the metric.",
                        "enum": ["mb", "kb", "percentage", "bit/s", "Byte/s"]
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": { "type": "string", "description": "The labels of the metric." },
                        "description": "The labels of the metric."
                    },
                    "metrics": {
                        "type": "array",
                        "description": "The list of the metric items.",
                        "items": { "$ref": "#/components/schemas/MetricItem" }
                    }
                }
            },
            "MetricItem": {
                "required": ["timeStamp", "type", "value"],
                "type": "object",
                "properties": {
                    "labels": {
                        "type": "object",
                        "additionalProperties": { "type": "string", "description": "The labels for the MetricItem." },
                        "description": "The labels for the MetricItem."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the MetricItem.",
                        "enum": ["value", "count", "sum"]
                    },
                    "timeStamp": {
                        "type": "integer",
                        "description": "Timestamp of the recorded metric.",
                        "format": "int64"
                    },
                    "value": { "type": "number", "description": "value of the MetricItem." }
                },
                "description": "The list of the metric items."
            },
            "BackendSystemStatus": {
                "required": ["backendSystemType", "healthStatus", "name"],
                "type": "object",
                "properties": {
                    "backendSystemType": {
                        "type": "string",
                        "description": "The type of backend system.",
                        "enum": ["IdentityProvider", "Database"]
                    },
                    "name": { "type": "string", "description": "The name of backend system." },
                    "healthStatus": {
                        "type": "string",
                        "description": "The health status of backend system.",
                        "enum": ["OK", "NOK"]
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of backend system. This filed is shown when the user have role 'admin' otherwise it is null."
                    },
                    "details": {
                        "type": "string",
                        "description": "The details why health is not ok.This filed is shown when the user have role 'admin' otherwise it is null."
                    }
                },
                "description": "The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled."
            },
            "SystemStatus": {
                "required": ["backendSystemStatuses", "healthStatus"],
                "type": "object",
                "properties": {
                    "healthStatus": {
                        "type": "string",
                        "description": "The health status of Xpanse api service.",
                        "enum": ["OK", "NOK"]
                    },
                    "backendSystemStatuses": {
                        "type": "array",
                        "description": "The health status of backend systems. This list contains status of identity provider and status of database.The status of identity provider will return when authorization is enabled.",
                        "items": { "$ref": "#/components/schemas/BackendSystemStatus" }
                    }
                }
            },
            "AbstractCredentialInfo": {
                "required": ["csp", "description", "name", "type", "userId"],
                "type": "object",
                "allOf": [
                    { "$ref": "#/components/schemas/CredentialVariables" },
                    {
                        "type": "object",
                        "properties": {
                            "csp": {
                                "type": "string",
                                "description": "The cloud service provider of the credential.",
                                "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                            },
                            "type": {
                                "type": "string",
                                "description": "The type of the credential,this field is provided by  he the plugin of cloud service provider.",
                                "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type."
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the credential,this field is provided by  he the plugin of cloud service provider."
                            },
                            "userId": { "type": "string", "description": "The id of user who create the credential." }
                        }
                    }
                ]
            },
            "CredentialVariables": {
                "required": ["csp", "description", "name", "type", "userId", "variables"],
                "type": "object",
                "properties": {
                    "csp": {
                        "type": "string",
                        "description": "The cloud service provider of the credential.",
                        "enum": ["huawei", "flexibleEngine", "openstack", "alicloud", "aws", "azure", "google"]
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the credential,this field is provided by  he the plugin of cloud service provider.",
                        "enum": ["variables", "http_authentication", "api_key", "oauth2"]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the credential, this field is provided by the plugin of cloud service provider. The value of this field must be unique between credentials with the same csp and type."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the credential,this field is provided by  he the plugin of cloud service provider."
                    },
                    "userId": { "type": "string", "description": "The id of user who create the credential." },
                    "variables": {
                        "type": "array",
                        "description": "The variables list of the credential.",
                        "items": { "$ref": "#/components/schemas/CredentialVariable" }
                    }
                }
            },
            "TokenResponse": {
                "required": ["access_token", "expires_in", "id_token", "token_type"],
                "type": "object",
                "properties": {
                    "access_token": { "type": "string", "description": "An access_token as a JWT or opaque token." },
                    "token_type": { "type": "string", "description": "Type of the access_token." },
                    "expires_in": {
                        "type": "string",
                        "description": "Number of second until the expiration of the access_token"
                    },
                    "id_token": { "type": "string", "description": "An id_token of the authorized service user" },
                    "scopes": { "type": "string", "description": "Scopes of the access_token." }
                }
            }
        },
        "securitySchemes": {
            "OAuth2 Flow": {
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "http://localhost:8080/oauth/v2/authorize",
                        "tokenUrl": "http://localhost:8080/oauth/v2/token",
                        "scopes": { "openid": "", "email": "", "profile": "" }
                    }
                }
            }
        }
    }
}
